**********************************************
unittest1.c TEST BEGIN:
TESTING baron():
FAILED: Number of buys test.
Player not discarding estate!
PASSED: Test adding estate from supply.

FAILED: Test removing estate from supply.

Player is discarding estate with estate in their hand!
PASSED: Test if estate is placed in discard.

PASSED: Test if estate is removed from hand.

PASSED: Testing if coins are have been increased by 4

Player is discarding estate without estate in their hand!
PASSED: Test if estate is placed in discard

PASSED: Testing if coins are unchanged

FAILED: Testing if supply is decremented

# FAILED TESTS: 3
File 'dominion.c'
Lines executed:22.75% of 567
Branches executed:21.18% of 425
Taken at least once:16.71% of 425
Calls executed:15.79% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 60 returned 100% blocks executed 83%
       60:    8:int compare(const void* a, const void* b) {
       60:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       60:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       16:   12:    return -1;
       44:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2 returned 100% blocks executed 88%
        2:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        2:   44:  SelectStream(1);
call    0 returned 100%
        2:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        2:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        2:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       22:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      220:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        2:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        2:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        2:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:  state->supplyCount[silver] = 40;
        2:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       42:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      330:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      310:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       20:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
        8:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       16:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       20:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        6:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        4:  140:      state->deckCount[i] = 0;
       16:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       12:  143:	  state->deck[i][j] = estate;
       12:  144:	  state->deckCount[i]++;
        -:  145:	}
       32:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       28:  148:	  state->deck[i][j] = copper;
       28:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        6:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        4:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        6:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        4:  166:      state->handCount[i] = 0;
        4:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       56:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       54:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        2:  182:  state->outpostPlayed = 0;
        2:  183:  state->phase = 0;
        2:  184:  state->numActions = 1;
        2:  185:  state->numBuys = 1;
        2:  186:  state->playedCardCount = 0;
        2:  187:  state->whoseTurn = 0;
        2:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       12:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        2:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        2:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 4 returned 100% blocks executed 94%
        4:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        4:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        4:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        4:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       48:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       40:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       40:  216:    newDeck[newDeckPos] = state->deck[player][card];
       40:  217:    newDeckPos++;
      140:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      100:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       40:  221:    state->deckCount[player]--;
        -:  222:  }
       44:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       40:  224:    state->deck[player][i] = newDeck[i];
       40:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        4:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 11 returned 100% blocks executed 100%
       11:  320:int supplyCount(int card, struct gameState *state) {
       11:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 15 returned 100% blocks executed 38%
       15:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       15:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       15:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       15:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  576:    state->deckCount[player]--;
       15:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       15:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  672:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  673:	}
    #####:  674:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
    #####:  684:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
    #####:  688:      return 0;
        -:  689:
        -:  690:    case council_room:
        -:  691:      //+4 Cards
    #####:  692:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  693:	{
    #####:  694:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  695:	}
        -:  696:
        -:  697:      //+1 Buy
    #####:  698:      state->numBuys++;
        -:  699:
        -:  700:      //Each other player draws a card
    #####:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  702:	{
    #####:  703:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  704:	    {
    #####:  705:	      drawCard(i, state);
call    0 never executed
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:      //put played card in played card pile
    #####:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  711:
    #####:  712:      return 0;
        -:  713:
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:
    #####:  765:      return 0;
        -:  766:
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:
        -:  770:    case mine:
        -:  771:      ;
        -:  772:      int checkit;
    #####:  773:      checkit = mineRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  774:      if(checkit == -1)
branch  0 never executed
branch  1 never executed
    #####:  775:        return -1;
        -:  776:      else
    #####:  777:        return 0;
        -:  778:
        -:  779:    case remodel:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  788:
        -:  789:      //discard card from hand
    #####:  790:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  791:
        -:  792:      //discard trashed card
    #####:  793:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  794:	{
    #####:  795:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  796:	    {
    #####:  797:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  798:	      break;
        -:  799:	    }
        -:  800:	}
        -:  801:
        -:  802:
    #####:  803:      return 0;
        -:  804:
        -:  805:    case smithy:
        -:  806:      //+3 Cards
    #####:  807:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  808:	{
    #####:  809:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  810:	}
        -:  811:
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  814:      return 0;
        -:  815:
        -:  816:    case village:
        -:  817:      //+1 Card
    #####:  818:      drawCard(currentPlayer, state);
call    0 never executed
        -:  819:
        -:  820:      //+2 Actions
    #####:  821:      state->numActions = state->numActions + 2;
        -:  822:
        -:  823:      //discard played card from hand
    #####:  824:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  825:      return 0;
        -:  826:
        -:  827:    case baron:
    #####:  828:      baronRe(state, currentPlayer, choice1);
call    0 never executed
    #####:  829:      return 0;
        -:  830:
        -:  831:    case great_hall:
        -:  832:      //+1 Card
    #####:  833:      drawCard(currentPlayer, state);
call    0 never executed
        -:  834:
        -:  835:      //+1 Actions
    #####:  836:      state->numActions++;
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  840:      return 0;
        -:  841:
        -:  842:    case minion:
        -:  843:
    #####:  844:    minionRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  845:    return 0;
        -:  846:
        -:  847:    case steward:
    #####:  848:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  849:	{
        -:  850:	  //+2 cards
    #####:  851:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  852:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  853:	}
    #####:  854:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  855:	{
        -:  856:	  //+2 coins
    #####:  857:	  state->coins = state->coins + 2;
        -:  858:	}
        -:  859:      else
        -:  860:	{
        -:  861:	  //trash 2 cards in hand
    #####:  862:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  863:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  864:	}
        -:  865:
        -:  866:      //discard card from hand
    #####:  867:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  868:      return 0;
        -:  869:
        -:  870:    case tribute:
        -:  871:
    #####:  872:      tributeRe(state, currentPlayer, tributeRevealedCards);
call    0 never executed
    #####:  873:      return 0;
        -:  874:
        -:  875:    case ambassador:
        -:  876:      ;
    #####:  877:      int check = ambassadorRe(state,currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  878:      if(check == -1)
branch  0 never executed
branch  1 never executed
    #####:  879:        return -1;
        -:  880:      else
    #####:  881:        return 0;
        -:  882:
        -:  883:    case cutpurse:
        -:  884:
    #####:  885:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  886:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  887:	{
    #####:  888:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  893:		    {
    #####:  894:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  895:		      break;
        -:  896:		    }
    #####:  897:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  898:		    {
    #####:  899:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  900:			{
        -:  901:			  if (DEBUG)
        -:  902:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  903:			}
    #####:  904:		      break;
        -:  905:		    }
        -:  906:		}
        -:  907:
        -:  908:	    }
        -:  909:
        -:  910:	}
        -:  911:
        -:  912:      //discard played card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  914:
    #####:  915:      return 0;
        -:  916:
        -:  917:
        -:  918:    case embargo:
        -:  919:      //+2 Coins
    #####:  920:      state->coins = state->coins + 2;
        -:  921:
        -:  922:      //see if selected pile is in play
    #####:  923:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  924:	{
    #####:  925:	  return -1;
        -:  926:	}
        -:  927:
        -:  928:      //add embargo token to selected supply pile
    #####:  929:      state->embargoTokens[choice1]++;
        -:  930:
        -:  931:      //trash card
    #####:  932:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  933:      return 0;
        -:  934:
        -:  935:    case outpost:
        -:  936:      //set outpost flag
    #####:  937:      state->outpostPlayed++;
        -:  938:
        -:  939:      //discard card
    #####:  940:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  941:      return 0;
        -:  942:
        -:  943:    case salvager:
        -:  944:      //+1 buy
    #####:  945:      state->numBuys++;
        -:  946:
    #####:  947:      if (choice1)
branch  0 never executed
branch  1 never executed
        -:  948:	{
        -:  949:	  //gain coins equal to trashed card
    #####:  950:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  951:	  //trash card
    #####:  952:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  953:	}
        -:  954:
        -:  955:      //discard card
    #####:  956:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  957:      return 0;
        -:  958:
        -:  959:    case sea_hag:
    #####:  960:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  962:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  963:	  state->discardCount[i]++;
    #####:  964:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  965:	}
        -:  966:      }
    #####:  967:      return 0;
        -:  968:
        -:  969:    case treasure_map:
        -:  970:      //search hand for another treasure_map
    #####:  971:      index = -1;
    #####:  972:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	{
    #####:  974:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  975:	    {
    #####:  976:	      index = i;
    #####:  977:	      break;
        -:  978:	    }
        -:  979:	}
    #####:  980:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //trash both treasure cards
    #####:  983:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  984:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  985:
        -:  986:	  //gain 4 Gold cards
    #####:  987:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  988:	    {
    #####:  989:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  990:	    }
        -:  991:
        -:  992:	  //return success
    #####:  993:	  return 1;
        -:  994:	}
        -:  995:
        -:  996:      //no second treasure_map found in hand
    #####:  997:      return -1;
        -:  998:    }
        -:  999:
    #####: 1000:  return -1;
        -: 1001:}
        -: 1002:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1003:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1004:{
        -: 1005:
        -: 1006:  //if card is not trashed, added to Played pile
    #####: 1007:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1008:    {
        -: 1009:      //add card to played pile
    #####: 1010:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1011:      state->playedCardCount++;
        -: 1012:    }
        -: 1013:
        -: 1014:  //set played card to -1
    #####: 1015:  state->hand[currentPlayer][handPos] = -1;
        -: 1016:
        -: 1017:  //remove card from player's hand
    #####: 1018:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1019:    {
        -: 1020:      //reduce number of cards in hand
    #####: 1021:      state->handCount[currentPlayer]--;
        -: 1022:    }
    #####: 1023:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1024:    {
        -: 1025:      //reduce number of cards in hand
    #####: 1026:      state->handCount[currentPlayer]--;
        -: 1027:    }
        -: 1028:  else
        -: 1029:    {
        -: 1030:      //replace discarded card with last card in hand
    #####: 1031:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1032:      //set last card to -1
    #####: 1033:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1034:      //reduce number of cards in hand
    #####: 1035:      state->handCount[currentPlayer]--;
        -: 1036:    }
        -: 1037:
    #####: 1038:  return 0;
        -: 1039:}
        -: 1040:
function gainCard called 3 returned 100% blocks executed 70%
        3: 1041:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1042:{
        -: 1043:  //Note: supplyPos is enum of choosen card
        -: 1044:
        -: 1045:  //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1046:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1047:    {
    #####: 1048:      return -1;
        -: 1049:    }
        -: 1050:
        -: 1051:  //added card for [whoseTurn] current player:
        -: 1052:  // toFlag = 0 : add to discard
        -: 1053:  // toFlag = 1 : add to deck
        -: 1054:  // toFlag = 2 : add to hand
        -: 1055:
        3: 1056:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1057:    {
    #####: 1058:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1059:      state->deckCount[player]++;
        -: 1060:    }
        3: 1061:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1062:    {
    #####: 1063:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1064:      state->handCount[player]++;
        -: 1065:    }
        -: 1066:  else
        -: 1067:    {
        3: 1068:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1069:      state->discardCount[player]++;
        -: 1070:    }
        -: 1071:
        -: 1072:  //decrease number in supply pile
        3: 1073:  state->supplyCount[supplyPos]--;
        -: 1074:
        3: 1075:  return 0;
        -: 1076:}
        -: 1077:
function updateCoins called 2 returned 100% blocks executed 82%
        2: 1078:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1079:{
        -: 1080:  int i;
        -: 1081:
        -: 1082:  //reset coin count
        2: 1083:  state->coins = 0;
        -: 1084:
        -: 1085:  //add coins for each Treasure card in player's hand
       12: 1086:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1087:    {
       10: 1088:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1089:	{
        8: 1090:	  state->coins += 1;
        -: 1091:	}
        2: 1092:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1093:	{
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        2: 1096:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1097:	{
    #####: 1098:	  state->coins += 3;
        -: 1099:	}
        -: 1100:    }
        -: 1101:
        -: 1102:  //add bonus
        2: 1103:  state->coins += bonus;
        -: 1104:
        2: 1105:  return 0;
        -: 1106:}
        -: 1107:
        -: 1108://Function to be ran inside cardEffect() for the baron specific card
function baronRe called 4 returned 100% blocks executed 92%
        4: 1109:void baronRe(struct gameState *state, int currentPlayer, int choice1) {
        4: 1110:  state->numBuys+1;//Increase buys by 1!
        4: 1111:  if(choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2: 1112:    int p = 0;//Iterator for hand!
        2: 1113:    int card_not_discarded = 1;//Flag for discard set!
       15: 1114:    while(card_not_discarded){
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
       11: 1115:      if(state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        1: 1116:        state->coins += 4;//Add 4 coins to the amount of coins
        1: 1117:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        1: 1118:        state->discardCount[currentPlayer]++;
        1: 1119:        p = handCountSlide(state, currentPlayer, p);
call    0 returned 100%
        1: 1120:        card_not_discarded = 0;//Exit the loop
        -: 1121:      }
       10: 1122:      else if(p > state->handCount[currentPlayer]){
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -: 1123:        if(DEBUG) {
        -: 1124:          printf("No estate cards in your hand, invalid choice\n");
        -: 1125:          printf("Must gain an estate if there are any\n");
        -: 1126:        }
        1: 1127:        if(supplyCount(estate, state) > 1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1: 1128:          gainCard(estate, state, 0, currentPlayer);
call    0 returned 100%
        1: 1129:          state->supplyCount[estate]--;//Decrement estates
        1: 1130:          if(supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1131:            isGameOver(state);
call    0 never executed
        -: 1132:          }
        -: 1133:        }
        1: 1134:        card_not_discarded = 0;//Exit the loop
        -: 1135:      }
        -: 1136:
        -: 1137:      else{
        9: 1138:        p++;//Next card
        -: 1139:      }
        -: 1140:    }
        -: 1141:  }
        -: 1142:
        -: 1143:  else{
        2: 1144:    if(supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 1145:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        2: 1146:      state->supplyCount[estate]--;//Decrement Estates
        2: 1147:      if(supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1148:        isGameOver(state);
call    0 never executed
        -: 1149:      }
        -: 1150:    }
        -: 1151:  }
        -: 1152:
        4: 1153:  return;
        -: 1154:}
        -: 1155://Function that slides the players hand down to remove a card from the players hand
function handCountSlide called 1 returned 100% blocks executed 100%
        1: 1156:int handCountSlide(struct gameState *state, int currentPlayer, int iterator) {
        3: 1157:  for (;iterator < state->handCount[currentPlayer]; iterator++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1158:    //Slide players hand down one card from current index (iterator)
        2: 1159:    state->hand[currentPlayer][iterator] = state->hand[currentPlayer][iterator+1];
        -: 1160:  }
        -: 1161:  //Remove hand count by one to completely remove card
        1: 1162:  state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1: 1163:  state->handCount[currentPlayer]--;
        1: 1164:  return iterator;
        -: 1165:}
        -: 1166:
        -: 1167://Function to be ran inside cardEffect() for the minion specific card
function minionRe called 0 returned 0% blocks executed 0%
    #####: 1168:void minionRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1169:  //+1 action
    #####: 1170:  state->numActions+1;
        -: 1171:  //discard card from hand
    #####: 1172:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1173:
    #####: 1174:  if(choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1175:  {
    #####: 1176:    state->coins = state->coins + 2;
        -: 1177:  }
        -: 1178:
    #####: 1179:  else if(choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1180:  {
        -: 1181:    //discard hand
    #####: 1182:    while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1183:    {
    #####: 1184:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1185:    }
        -: 1186:    int i;
        -: 1187:    int j;
        -: 1188:    //draw 4
    #####: 1189:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1190:    {
    #####: 1191:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1192:    }
        -: 1193:
        -: 1194:    //other players discard hand and redraw if hand size > 4
    #####: 1195:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:    {
    #####: 1197:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1198:      {
    #####: 1199:        if ( state->handCount[i] > 5 )
branch  0 never executed
branch  1 never executed
        -: 1200:        {
        -: 1201:          //discard hand
    #####: 1202:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1203:          {
    #####: 1204:            discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1205:          }
        -: 1206:          //draw 4
    #####: 1207:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1208:          {
    #####: 1209:            drawCard(i, state);
call    0 never executed
        -: 1210:          }
        -: 1211:        }
        -: 1212:      }
        -: 1213:    }
        -: 1214:  }
    #####: 1215:  return;
        -: 1216:}
        -: 1217:
function ambassadorRe called 0 returned 0% blocks executed 0%
    #####: 1218:int ambassadorRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1219:  int i;
    #####: 1220:  int j = 0;		//used to check if player has enough cards to discard
        -: 1221:  //Checks bound cases, if the amount of cards is less that 0 or greater than 2, or if the choice1 card is the ambassador card
    #####: 1222:  if (choice2 > 2 || choice2 < 0 || choice1 == handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1223:  {
    #####: 1224:    return -1;
        -: 1225:  }
        -: 1226:  //Loop to check how many copies of the card the player wishes to return to the supply
    #####: 1227:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1228:  {
    #####: 1229:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) //Checks for bound cases
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1230:    {
    #####: 1231:      j++;
        -: 1232:    }
        -: 1233:  }
    #####: 1234:  if (j < choice2)  //bound case if player does not have the amount of desired cards to return
branch  0 never executed
branch  1 never executed
        -: 1235:  {
    #####: 1236:    return -1;
        -: 1237:  }
        -: 1238:
        -: 1239:  if (DEBUG)
        -: 1240:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1241:
        -: 1242:  //increase supply count for choosen card by amount being discarded
    #####: 1243:  state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1244:
        -: 1245:  //each other player gains a copy of revealed card
    #####: 1246:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1247:  {
    #####: 1248:    if (j != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1249:    {
    #####: 1250:      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1251:    }
        -: 1252:  }
        -: 1253:
        -: 1254:  //discard played card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1256:
        -: 1257:  //trash copies of cards returned to supply
    #####: 1258:  for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1259:  {
    #####: 1260:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:    {
    #####: 1262:      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1263:      {
    #####: 1264:        discardCard(j, currentPlayer, state, 1);
call    0 never executed
    #####: 1265:        break;
        -: 1266:      }
        -: 1267:    }
        -: 1268:  }
    #####: 1269:  return 0;
        -: 1270:}
        -: 1271:
function tributeRe called 0 returned 0% blocks executed 0%
    #####: 1272:void tributeRe(struct gameState *state, int currentPlayer, int tributeRevealedCards[]) {
        -: 1273:  int j;  //used in refactored for loops
    #####: 1274:  int nextPlayer = currentPlayer + 1;
    #####: 1275:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1276:    if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1277:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1278:      state->deckCount[nextPlayer]--;
        -: 1279:    }
    #####: 1280:    else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1281:      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1282:      state->discardCount[nextPlayer]--;
        -: 1283:    }
        -: 1284:    else{
        -: 1285:      //No Card to Reveal
        -: 1286:      if (DEBUG){
        -: 1287:        printf("No cards to reveal\n");
        -: 1288:      }
        -: 1289:    }
        -: 1290:  }
        -: 1291:
        -: 1292:  else{
        -: 1293:    int i;
    #####: 1294:    if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1295:      for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1296:        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1297:        state->deckCount[nextPlayer]++;
    #####: 1298:        state->discard[nextPlayer][i] = -1;
    #####: 1299:        state->discardCount[nextPlayer]--;
        -: 1300:      }
        -: 1301:
    #####: 1302:      shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1303:    }
    #####: 1304:    j = 1;
    #####: 1305:    for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1306:      tributeRevealedCards[j] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1307:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1308:      state->deckCount[nextPlayer]--;
        -: 1309:    }
        -: 1310:
    #####: 1311:  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1312:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1313:    state->playedCardCount++;
    #####: 1314:    tributeRevealedCards[1] = -1;
        -: 1315:  }
        -: 1316:
    #####: 1317:  for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1318:    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1319:      state->coins += 2;
        -: 1320:    }
        -: 1321:
    #####: 1322:    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1323:      j = 0;
        -: 1324:      //draw 2 cards
    #####: 1325:      for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1326:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1327:      }
        -: 1328:    }
        -: 1329:    else{//Action Card
    #####: 1330:      state->numActions = 2;
        -: 1331:    }
        -: 1332:  }
    #####: 1333:  return;
        -: 1334:}
        -: 1335:}
        -: 1336:
function mineRe called 0 returned 0% blocks executed 0%
    #####: 1337:int mineRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1338:  int cardToTrash = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1339:
    #####: 1340:  if (state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] < gold || choice2 < treasure_map || choice2 > curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1341:  {
    #####: 1342:    return -1;
        -: 1343:  }
        -: 1344:
    #####: 1345:  if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1346:  {
    #####: 1347:    return -1;
        -: 1348:  }
        -: 1349:
    #####: 1350:  gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1351:
        -: 1352:  //discard card from hand
    #####: 1353:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1354:  int i;
        -: 1355:  //discard trashed card
    #####: 1356:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1357:  {
    #####: 1358:    if (state->hand[currentPlayer][i] != cardToTrash)
branch  0 never executed
branch  1 never executed
        -: 1359:    {
    #####: 1360:      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1361:      break;
        -: 1362:    }
        -: 1363:  }
    #####: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367://end of dominion.c
**********************************************
**********************************************
unittest2.c TEST BEGIN:
TESTING minionRe():
FAILED: Number of actions test.

PASSED: Number of coins test.

PASSED: Minion card added to played cards pile.

PASSED: Minion card removed from hand test.

PASSED: Test that discards current player's hand.
PASSED: Test that discards current player's hand.
# FAILED TESTS: 1
File 'dominion.c'
Lines executed:21.16% of 567
Branches executed:20.24% of 425
Taken at least once:16.71% of 425
Calls executed:12.63% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 90 returned 100% blocks executed 83%
       90:    8:int compare(const void* a, const void* b) {
       90:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       90:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       24:   12:    return -1;
       66:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 3 returned 100% blocks executed 88%
        3:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
call    0 returned 100%
        3:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        3:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      330:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       63:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      495:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       30:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       12:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       24:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       30:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        9:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        6:  140:      state->deckCount[i] = 0;
       24:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       18:  143:	  state->deck[i][j] = estate;
       18:  144:	  state->deckCount[i]++;
        -:  145:	}
       48:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       42:  148:	  state->deck[i][j] = copper;
       42:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        9:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        6:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        9:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        6:  166:      state->handCount[i] = 0;
        6:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       84:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       18:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        3:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 6 returned 100% blocks executed 94%
        6:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        6:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        6:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        6:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       72:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       60:  216:    newDeck[newDeckPos] = state->deck[player][card];
       60:  217:    newDeckPos++;
      210:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      150:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       60:  221:    state->deckCount[player]--;
        -:  222:  }
       66:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:  224:    state->deck[player][i] = newDeck[i];
       60:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        6:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 5 returned 100% blocks executed 100%
        5:  311:int numHandCards(struct gameState *state) {
        5:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 5 returned 100% blocks executed 100%
        5:  346:int whoseTurn(struct gameState *state) {
        5:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 19 returned 100% blocks executed 38%
       19:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       19:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       19:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       19:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       19:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       19:  576:    state->deckCount[player]--;
       19:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       19:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  672:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  673:	}
    #####:  674:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
    #####:  684:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
    #####:  688:      return 0;
        -:  689:
        -:  690:    case council_room:
        -:  691:      //+4 Cards
    #####:  692:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  693:	{
    #####:  694:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  695:	}
        -:  696:
        -:  697:      //+1 Buy
    #####:  698:      state->numBuys++;
        -:  699:
        -:  700:      //Each other player draws a card
    #####:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  702:	{
    #####:  703:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  704:	    {
    #####:  705:	      drawCard(i, state);
call    0 never executed
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:      //put played card in played card pile
    #####:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  711:
    #####:  712:      return 0;
        -:  713:
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:
    #####:  765:      return 0;
        -:  766:
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:
        -:  770:    case mine:
        -:  771:      ;
        -:  772:      int checkit;
    #####:  773:      checkit = mineRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  774:      if(checkit == -1)
branch  0 never executed
branch  1 never executed
    #####:  775:        return -1;
        -:  776:      else
    #####:  777:        return 0;
        -:  778:
        -:  779:    case remodel:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  788:
        -:  789:      //discard card from hand
    #####:  790:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  791:
        -:  792:      //discard trashed card
    #####:  793:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  794:	{
    #####:  795:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  796:	    {
    #####:  797:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  798:	      break;
        -:  799:	    }
        -:  800:	}
        -:  801:
        -:  802:
    #####:  803:      return 0;
        -:  804:
        -:  805:    case smithy:
        -:  806:      //+3 Cards
    #####:  807:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  808:	{
    #####:  809:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  810:	}
        -:  811:
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  814:      return 0;
        -:  815:
        -:  816:    case village:
        -:  817:      //+1 Card
    #####:  818:      drawCard(currentPlayer, state);
call    0 never executed
        -:  819:
        -:  820:      //+2 Actions
    #####:  821:      state->numActions = state->numActions + 2;
        -:  822:
        -:  823:      //discard played card from hand
    #####:  824:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  825:      return 0;
        -:  826:
        -:  827:    case baron:
    #####:  828:      baronRe(state, currentPlayer, choice1);
call    0 never executed
    #####:  829:      return 0;
        -:  830:
        -:  831:    case great_hall:
        -:  832:      //+1 Card
    #####:  833:      drawCard(currentPlayer, state);
call    0 never executed
        -:  834:
        -:  835:      //+1 Actions
    #####:  836:      state->numActions++;
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  840:      return 0;
        -:  841:
        -:  842:    case minion:
        -:  843:
    #####:  844:    minionRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  845:    return 0;
        -:  846:
        -:  847:    case steward:
    #####:  848:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  849:	{
        -:  850:	  //+2 cards
    #####:  851:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  852:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  853:	}
    #####:  854:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  855:	{
        -:  856:	  //+2 coins
    #####:  857:	  state->coins = state->coins + 2;
        -:  858:	}
        -:  859:      else
        -:  860:	{
        -:  861:	  //trash 2 cards in hand
    #####:  862:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  863:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  864:	}
        -:  865:
        -:  866:      //discard card from hand
    #####:  867:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  868:      return 0;
        -:  869:
        -:  870:    case tribute:
        -:  871:
    #####:  872:      tributeRe(state, currentPlayer, tributeRevealedCards);
call    0 never executed
    #####:  873:      return 0;
        -:  874:
        -:  875:    case ambassador:
        -:  876:      ;
    #####:  877:      int check = ambassadorRe(state,currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  878:      if(check == -1)
branch  0 never executed
branch  1 never executed
    #####:  879:        return -1;
        -:  880:      else
    #####:  881:        return 0;
        -:  882:
        -:  883:    case cutpurse:
        -:  884:
    #####:  885:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  886:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  887:	{
    #####:  888:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  893:		    {
    #####:  894:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  895:		      break;
        -:  896:		    }
    #####:  897:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  898:		    {
    #####:  899:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  900:			{
        -:  901:			  if (DEBUG)
        -:  902:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  903:			}
    #####:  904:		      break;
        -:  905:		    }
        -:  906:		}
        -:  907:
        -:  908:	    }
        -:  909:
        -:  910:	}
        -:  911:
        -:  912:      //discard played card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  914:
    #####:  915:      return 0;
        -:  916:
        -:  917:
        -:  918:    case embargo:
        -:  919:      //+2 Coins
    #####:  920:      state->coins = state->coins + 2;
        -:  921:
        -:  922:      //see if selected pile is in play
    #####:  923:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  924:	{
    #####:  925:	  return -1;
        -:  926:	}
        -:  927:
        -:  928:      //add embargo token to selected supply pile
    #####:  929:      state->embargoTokens[choice1]++;
        -:  930:
        -:  931:      //trash card
    #####:  932:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  933:      return 0;
        -:  934:
        -:  935:    case outpost:
        -:  936:      //set outpost flag
    #####:  937:      state->outpostPlayed++;
        -:  938:
        -:  939:      //discard card
    #####:  940:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  941:      return 0;
        -:  942:
        -:  943:    case salvager:
        -:  944:      //+1 buy
    #####:  945:      state->numBuys++;
        -:  946:
    #####:  947:      if (choice1)
branch  0 never executed
branch  1 never executed
        -:  948:	{
        -:  949:	  //gain coins equal to trashed card
    #####:  950:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  951:	  //trash card
    #####:  952:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  953:	}
        -:  954:
        -:  955:      //discard card
    #####:  956:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  957:      return 0;
        -:  958:
        -:  959:    case sea_hag:
    #####:  960:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  962:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  963:	  state->discardCount[i]++;
    #####:  964:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  965:	}
        -:  966:      }
    #####:  967:      return 0;
        -:  968:
        -:  969:    case treasure_map:
        -:  970:      //search hand for another treasure_map
    #####:  971:      index = -1;
    #####:  972:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	{
    #####:  974:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  975:	    {
    #####:  976:	      index = i;
    #####:  977:	      break;
        -:  978:	    }
        -:  979:	}
    #####:  980:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //trash both treasure cards
    #####:  983:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  984:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  985:
        -:  986:	  //gain 4 Gold cards
    #####:  987:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  988:	    {
    #####:  989:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  990:	    }
        -:  991:
        -:  992:	  //return success
    #####:  993:	  return 1;
        -:  994:	}
        -:  995:
        -:  996:      //no second treasure_map found in hand
    #####:  997:      return -1;
        -:  998:    }
        -:  999:
    #####: 1000:  return -1;
        -: 1001:}
        -: 1002:
function discardCard called 7 returned 100% blocks executed 100%
        7: 1003:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1004:{
        -: 1005:
        -: 1006:  //if card is not trashed, added to Played pile
        7: 1007:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1008:    {
        -: 1009:      //add card to played pile
        7: 1010:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        7: 1011:      state->playedCardCount++;
        -: 1012:    }
        -: 1013:
        -: 1014:  //set played card to -1
        7: 1015:  state->hand[currentPlayer][handPos] = -1;
        -: 1016:
        -: 1017:  //remove card from player's hand
        7: 1018:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -: 1019:    {
        -: 1020:      //reduce number of cards in hand
        3: 1021:      state->handCount[currentPlayer]--;
        -: 1022:    }
        4: 1023:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1024:    {
        -: 1025:      //reduce number of cards in hand
        1: 1026:      state->handCount[currentPlayer]--;
        -: 1027:    }
        -: 1028:  else
        -: 1029:    {
        -: 1030:      //replace discarded card with last card in hand
        3: 1031:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1032:      //set last card to -1
        3: 1033:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1034:      //reduce number of cards in hand
        3: 1035:      state->handCount[currentPlayer]--;
        -: 1036:    }
        -: 1037:
        7: 1038:  return 0;
        -: 1039:}
        -: 1040:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1041:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1042:{
        -: 1043:  //Note: supplyPos is enum of choosen card
        -: 1044:
        -: 1045:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1046:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1047:    {
    #####: 1048:      return -1;
        -: 1049:    }
        -: 1050:
        -: 1051:  //added card for [whoseTurn] current player:
        -: 1052:  // toFlag = 0 : add to discard
        -: 1053:  // toFlag = 1 : add to deck
        -: 1054:  // toFlag = 2 : add to hand
        -: 1055:
    #####: 1056:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1057:    {
    #####: 1058:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1059:      state->deckCount[player]++;
        -: 1060:    }
    #####: 1061:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1062:    {
    #####: 1063:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1064:      state->handCount[player]++;
        -: 1065:    }
        -: 1066:  else
        -: 1067:    {
    #####: 1068:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1069:      state->discardCount[player]++;
        -: 1070:    }
        -: 1071:
        -: 1072:  //decrease number in supply pile
    #####: 1073:  state->supplyCount[supplyPos]--;
        -: 1074:
    #####: 1075:  return 0;
        -: 1076:}
        -: 1077:
function updateCoins called 3 returned 100% blocks executed 82%
        3: 1078:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1079:{
        -: 1080:  int i;
        -: 1081:
        -: 1082:  //reset coin count
        3: 1083:  state->coins = 0;
        -: 1084:
        -: 1085:  //add coins for each Treasure card in player's hand
       18: 1086:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1087:    {
       15: 1088:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1089:	{
       12: 1090:	  state->coins += 1;
        -: 1091:	}
        3: 1092:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1093:	{
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        3: 1096:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1097:	{
    #####: 1098:	  state->coins += 3;
        -: 1099:	}
        -: 1100:    }
        -: 1101:
        -: 1102:  //add bonus
        3: 1103:  state->coins += bonus;
        -: 1104:
        3: 1105:  return 0;
        -: 1106:}
        -: 1107:
        -: 1108://Function to be ran inside cardEffect() for the baron specific card
function baronRe called 0 returned 0% blocks executed 0%
    #####: 1109:void baronRe(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1110:  state->numBuys+1;//Increase buys by 1!
    #####: 1111:  if(choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1112:    int p = 0;//Iterator for hand!
    #####: 1113:    int card_not_discarded = 1;//Flag for discard set!
    #####: 1114:    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1115:      if(state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1116:        state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1117:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1118:        state->discardCount[currentPlayer]++;
    #####: 1119:        p = handCountSlide(state, currentPlayer, p);
call    0 never executed
    #####: 1120:        card_not_discarded = 0;//Exit the loop
        -: 1121:      }
    #####: 1122:      else if(p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1123:        if(DEBUG) {
        -: 1124:          printf("No estate cards in your hand, invalid choice\n");
        -: 1125:          printf("Must gain an estate if there are any\n");
        -: 1126:        }
    #####: 1127:        if(supplyCount(estate, state) > 1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1128:          gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1129:          state->supplyCount[estate]--;//Decrement estates
    #####: 1130:          if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1131:            isGameOver(state);
call    0 never executed
        -: 1132:          }
        -: 1133:        }
    #####: 1134:        card_not_discarded = 0;//Exit the loop
        -: 1135:      }
        -: 1136:
        -: 1137:      else{
    #####: 1138:        p++;//Next card
        -: 1139:      }
        -: 1140:    }
        -: 1141:  }
        -: 1142:
        -: 1143:  else{
    #####: 1144:    if(supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1145:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1146:      state->supplyCount[estate]--;//Decrement Estates
    #####: 1147:      if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1148:        isGameOver(state);
call    0 never executed
        -: 1149:      }
        -: 1150:    }
        -: 1151:  }
        -: 1152:
    #####: 1153:  return;
        -: 1154:}
        -: 1155://Function that slides the players hand down to remove a card from the players hand
function handCountSlide called 0 returned 0% blocks executed 0%
    #####: 1156:int handCountSlide(struct gameState *state, int currentPlayer, int iterator) {
    #####: 1157:  for (;iterator < state->handCount[currentPlayer]; iterator++){
branch  0 never executed
branch  1 never executed
        -: 1158:    //Slide players hand down one card from current index (iterator)
    #####: 1159:    state->hand[currentPlayer][iterator] = state->hand[currentPlayer][iterator+1];
        -: 1160:  }
        -: 1161:  //Remove hand count by one to completely remove card
    #####: 1162:  state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1163:  state->handCount[currentPlayer]--;
    #####: 1164:  return iterator;
        -: 1165:}
        -: 1166:
        -: 1167://Function to be ran inside cardEffect() for the minion specific card
function minionRe called 3 returned 100% blocks executed 73%
        3: 1168:void minionRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1169:  //+1 action
        3: 1170:  state->numActions+1;
        -: 1171:  //discard card from hand
        3: 1172:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1173:
        3: 1174:  if(choice1)		//+2 coins
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1175:  {
        2: 1176:    state->coins = state->coins + 2;
        -: 1177:  }
        -: 1178:
        1: 1179:  else if(choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1180:  {
        -: 1181:    //discard hand
        6: 1182:    while(numHandCards(state) > 0)
call    0 returned 100%
branch  1 taken 80%
branch  2 taken 20% (fallthrough)
        -: 1183:    {
        4: 1184:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1185:    }
        -: 1186:    int i;
        -: 1187:    int j;
        -: 1188:    //draw 4
        5: 1189:    for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1190:    {
        4: 1191:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1192:    }
        -: 1193:
        -: 1194:    //other players discard hand and redraw if hand size > 4
        3: 1195:    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1196:    {
        2: 1197:      if (i != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1198:      {
        1: 1199:        if ( state->handCount[i] > 5 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1200:        {
        -: 1201:          //discard hand
    #####: 1202:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1203:          {
    #####: 1204:            discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1205:          }
        -: 1206:          //draw 4
    #####: 1207:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1208:          {
    #####: 1209:            drawCard(i, state);
call    0 never executed
        -: 1210:          }
        -: 1211:        }
        -: 1212:      }
        -: 1213:    }
        -: 1214:  }
        3: 1215:  return;
        -: 1216:}
        -: 1217:
function ambassadorRe called 0 returned 0% blocks executed 0%
    #####: 1218:int ambassadorRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1219:  int i;
    #####: 1220:  int j = 0;		//used to check if player has enough cards to discard
        -: 1221:  //Checks bound cases, if the amount of cards is less that 0 or greater than 2, or if the choice1 card is the ambassador card
    #####: 1222:  if (choice2 > 2 || choice2 < 0 || choice1 == handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1223:  {
    #####: 1224:    return -1;
        -: 1225:  }
        -: 1226:  //Loop to check how many copies of the card the player wishes to return to the supply
    #####: 1227:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1228:  {
    #####: 1229:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) //Checks for bound cases
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1230:    {
    #####: 1231:      j++;
        -: 1232:    }
        -: 1233:  }
    #####: 1234:  if (j < choice2)  //bound case if player does not have the amount of desired cards to return
branch  0 never executed
branch  1 never executed
        -: 1235:  {
    #####: 1236:    return -1;
        -: 1237:  }
        -: 1238:
        -: 1239:  if (DEBUG)
        -: 1240:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1241:
        -: 1242:  //increase supply count for choosen card by amount being discarded
    #####: 1243:  state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1244:
        -: 1245:  //each other player gains a copy of revealed card
    #####: 1246:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1247:  {
    #####: 1248:    if (j != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1249:    {
    #####: 1250:      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1251:    }
        -: 1252:  }
        -: 1253:
        -: 1254:  //discard played card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1256:
        -: 1257:  //trash copies of cards returned to supply
    #####: 1258:  for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1259:  {
    #####: 1260:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:    {
    #####: 1262:      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1263:      {
    #####: 1264:        discardCard(j, currentPlayer, state, 1);
call    0 never executed
    #####: 1265:        break;
        -: 1266:      }
        -: 1267:    }
        -: 1268:  }
    #####: 1269:  return 0;
        -: 1270:}
        -: 1271:
function tributeRe called 0 returned 0% blocks executed 0%
    #####: 1272:void tributeRe(struct gameState *state, int currentPlayer, int tributeRevealedCards[]) {
        -: 1273:  int j;  //used in refactored for loops
    #####: 1274:  int nextPlayer = currentPlayer + 1;
    #####: 1275:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1276:    if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1277:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1278:      state->deckCount[nextPlayer]--;
        -: 1279:    }
    #####: 1280:    else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1281:      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1282:      state->discardCount[nextPlayer]--;
        -: 1283:    }
        -: 1284:    else{
        -: 1285:      //No Card to Reveal
        -: 1286:      if (DEBUG){
        -: 1287:        printf("No cards to reveal\n");
        -: 1288:      }
        -: 1289:    }
        -: 1290:  }
        -: 1291:
        -: 1292:  else{
        -: 1293:    int i;
    #####: 1294:    if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1295:      for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1296:        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1297:        state->deckCount[nextPlayer]++;
    #####: 1298:        state->discard[nextPlayer][i] = -1;
    #####: 1299:        state->discardCount[nextPlayer]--;
        -: 1300:      }
        -: 1301:
    #####: 1302:      shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1303:    }
    #####: 1304:    j = 1;
    #####: 1305:    for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1306:      tributeRevealedCards[j] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1307:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1308:      state->deckCount[nextPlayer]--;
        -: 1309:    }
        -: 1310:
    #####: 1311:  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1312:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1313:    state->playedCardCount++;
    #####: 1314:    tributeRevealedCards[1] = -1;
        -: 1315:  }
        -: 1316:
    #####: 1317:  for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1318:    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1319:      state->coins += 2;
        -: 1320:    }
        -: 1321:
    #####: 1322:    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1323:      j = 0;
        -: 1324:      //draw 2 cards
    #####: 1325:      for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1326:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1327:      }
        -: 1328:    }
        -: 1329:    else{//Action Card
    #####: 1330:      state->numActions = 2;
        -: 1331:    }
        -: 1332:  }
    #####: 1333:  return;
        -: 1334:}
        -: 1335:}
        -: 1336:
function mineRe called 0 returned 0% blocks executed 0%
    #####: 1337:int mineRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1338:  int cardToTrash = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1339:
    #####: 1340:  if (state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] < gold || choice2 < treasure_map || choice2 > curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1341:  {
    #####: 1342:    return -1;
        -: 1343:  }
        -: 1344:
    #####: 1345:  if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1346:  {
    #####: 1347:    return -1;
        -: 1348:  }
        -: 1349:
    #####: 1350:  gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1351:
        -: 1352:  //discard card from hand
    #####: 1353:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1354:  int i;
        -: 1355:  //discard trashed card
    #####: 1356:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1357:  {
    #####: 1358:    if (state->hand[currentPlayer][i] != cardToTrash)
branch  0 never executed
branch  1 never executed
        -: 1359:    {
    #####: 1360:      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1361:      break;
        -: 1362:    }
        -: 1363:  }
    #####: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367://end of dominion.c
**********************************************
**********************************************
unittest3.c TEST BEGIN:
TESTING ambassadorRe():
Test to check when card is played and only one revelead card is in players hand
FAILED: Test to check if revealed card was removed from hand

PASSED: Test to check if copies of revealed card are return to supply

FAILED: Test to check if other player's recieved copy of revealed card

Test to check when card is played and there are not 2 revelead card is in players hand when choice2 is set to 2
PASSED: Function returns -1 when # of cards revealed does not match # of that card in player's hand!

Test to check when card is played and 2 revelead card is in players hand 
FAILED: Test to check if revealed cards(2) was removed from hand

FAILED: Test to check if copies of revealed card are return to supply

FAILED: Test to check if other player's recieved copy of revealed card

# FAILED TESTS: 5
File 'dominion.c'
Lines executed:17.11% of 567
Branches executed:19.29% of 425
Taken at least once:15.29% of 425
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 100%
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
        4:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        8:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 94%
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       70:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       50:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 5 returned 100% blocks executed 38%
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        5:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        5:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        5:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:    state->deckCount[player]--;
        5:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        5:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  672:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  673:	}
    #####:  674:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
    #####:  684:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
    #####:  688:      return 0;
        -:  689:
        -:  690:    case council_room:
        -:  691:      //+4 Cards
    #####:  692:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  693:	{
    #####:  694:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  695:	}
        -:  696:
        -:  697:      //+1 Buy
    #####:  698:      state->numBuys++;
        -:  699:
        -:  700:      //Each other player draws a card
    #####:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  702:	{
    #####:  703:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  704:	    {
    #####:  705:	      drawCard(i, state);
call    0 never executed
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:      //put played card in played card pile
    #####:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  711:
    #####:  712:      return 0;
        -:  713:
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:
    #####:  765:      return 0;
        -:  766:
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:
        -:  770:    case mine:
        -:  771:      ;
        -:  772:      int checkit;
    #####:  773:      checkit = mineRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  774:      if(checkit == -1)
branch  0 never executed
branch  1 never executed
    #####:  775:        return -1;
        -:  776:      else
    #####:  777:        return 0;
        -:  778:
        -:  779:    case remodel:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  788:
        -:  789:      //discard card from hand
    #####:  790:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  791:
        -:  792:      //discard trashed card
    #####:  793:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  794:	{
    #####:  795:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  796:	    {
    #####:  797:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  798:	      break;
        -:  799:	    }
        -:  800:	}
        -:  801:
        -:  802:
    #####:  803:      return 0;
        -:  804:
        -:  805:    case smithy:
        -:  806:      //+3 Cards
    #####:  807:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  808:	{
    #####:  809:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  810:	}
        -:  811:
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  814:      return 0;
        -:  815:
        -:  816:    case village:
        -:  817:      //+1 Card
    #####:  818:      drawCard(currentPlayer, state);
call    0 never executed
        -:  819:
        -:  820:      //+2 Actions
    #####:  821:      state->numActions = state->numActions + 2;
        -:  822:
        -:  823:      //discard played card from hand
    #####:  824:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  825:      return 0;
        -:  826:
        -:  827:    case baron:
    #####:  828:      baronRe(state, currentPlayer, choice1);
call    0 never executed
    #####:  829:      return 0;
        -:  830:
        -:  831:    case great_hall:
        -:  832:      //+1 Card
    #####:  833:      drawCard(currentPlayer, state);
call    0 never executed
        -:  834:
        -:  835:      //+1 Actions
    #####:  836:      state->numActions++;
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  840:      return 0;
        -:  841:
        -:  842:    case minion:
        -:  843:
    #####:  844:    minionRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  845:    return 0;
        -:  846:
        -:  847:    case steward:
    #####:  848:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  849:	{
        -:  850:	  //+2 cards
    #####:  851:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  852:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  853:	}
    #####:  854:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  855:	{
        -:  856:	  //+2 coins
    #####:  857:	  state->coins = state->coins + 2;
        -:  858:	}
        -:  859:      else
        -:  860:	{
        -:  861:	  //trash 2 cards in hand
    #####:  862:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  863:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  864:	}
        -:  865:
        -:  866:      //discard card from hand
    #####:  867:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  868:      return 0;
        -:  869:
        -:  870:    case tribute:
        -:  871:
    #####:  872:      tributeRe(state, currentPlayer, tributeRevealedCards);
call    0 never executed
    #####:  873:      return 0;
        -:  874:
        -:  875:    case ambassador:
        -:  876:      ;
    #####:  877:      int check = ambassadorRe(state,currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  878:      if(check == -1)
branch  0 never executed
branch  1 never executed
    #####:  879:        return -1;
        -:  880:      else
    #####:  881:        return 0;
        -:  882:
        -:  883:    case cutpurse:
        -:  884:
    #####:  885:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  886:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  887:	{
    #####:  888:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  893:		    {
    #####:  894:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  895:		      break;
        -:  896:		    }
    #####:  897:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  898:		    {
    #####:  899:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  900:			{
        -:  901:			  if (DEBUG)
        -:  902:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  903:			}
    #####:  904:		      break;
        -:  905:		    }
        -:  906:		}
        -:  907:
        -:  908:	    }
        -:  909:
        -:  910:	}
        -:  911:
        -:  912:      //discard played card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  914:
    #####:  915:      return 0;
        -:  916:
        -:  917:
        -:  918:    case embargo:
        -:  919:      //+2 Coins
    #####:  920:      state->coins = state->coins + 2;
        -:  921:
        -:  922:      //see if selected pile is in play
    #####:  923:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  924:	{
    #####:  925:	  return -1;
        -:  926:	}
        -:  927:
        -:  928:      //add embargo token to selected supply pile
    #####:  929:      state->embargoTokens[choice1]++;
        -:  930:
        -:  931:      //trash card
    #####:  932:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  933:      return 0;
        -:  934:
        -:  935:    case outpost:
        -:  936:      //set outpost flag
    #####:  937:      state->outpostPlayed++;
        -:  938:
        -:  939:      //discard card
    #####:  940:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  941:      return 0;
        -:  942:
        -:  943:    case salvager:
        -:  944:      //+1 buy
    #####:  945:      state->numBuys++;
        -:  946:
    #####:  947:      if (choice1)
branch  0 never executed
branch  1 never executed
        -:  948:	{
        -:  949:	  //gain coins equal to trashed card
    #####:  950:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  951:	  //trash card
    #####:  952:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  953:	}
        -:  954:
        -:  955:      //discard card
    #####:  956:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  957:      return 0;
        -:  958:
        -:  959:    case sea_hag:
    #####:  960:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  962:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  963:	  state->discardCount[i]++;
    #####:  964:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  965:	}
        -:  966:      }
    #####:  967:      return 0;
        -:  968:
        -:  969:    case treasure_map:
        -:  970:      //search hand for another treasure_map
    #####:  971:      index = -1;
    #####:  972:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	{
    #####:  974:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  975:	    {
    #####:  976:	      index = i;
    #####:  977:	      break;
        -:  978:	    }
        -:  979:	}
    #####:  980:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //trash both treasure cards
    #####:  983:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  984:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  985:
        -:  986:	  //gain 4 Gold cards
    #####:  987:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  988:	    {
    #####:  989:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  990:	    }
        -:  991:
        -:  992:	  //return success
    #####:  993:	  return 1;
        -:  994:	}
        -:  995:
        -:  996:      //no second treasure_map found in hand
    #####:  997:      return -1;
        -:  998:    }
        -:  999:
    #####: 1000:  return -1;
        -: 1001:}
        -: 1002:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1003:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1004:{
        -: 1005:
        -: 1006:  //if card is not trashed, added to Played pile
    #####: 1007:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1008:    {
        -: 1009:      //add card to played pile
    #####: 1010:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1011:      state->playedCardCount++;
        -: 1012:    }
        -: 1013:
        -: 1014:  //set played card to -1
    #####: 1015:  state->hand[currentPlayer][handPos] = -1;
        -: 1016:
        -: 1017:  //remove card from player's hand
    #####: 1018:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1019:    {
        -: 1020:      //reduce number of cards in hand
    #####: 1021:      state->handCount[currentPlayer]--;
        -: 1022:    }
    #####: 1023:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1024:    {
        -: 1025:      //reduce number of cards in hand
    #####: 1026:      state->handCount[currentPlayer]--;
        -: 1027:    }
        -: 1028:  else
        -: 1029:    {
        -: 1030:      //replace discarded card with last card in hand
    #####: 1031:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1032:      //set last card to -1
    #####: 1033:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1034:      //reduce number of cards in hand
    #####: 1035:      state->handCount[currentPlayer]--;
        -: 1036:    }
        -: 1037:
    #####: 1038:  return 0;
        -: 1039:}
        -: 1040:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1041:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1042:{
        -: 1043:  //Note: supplyPos is enum of choosen card
        -: 1044:
        -: 1045:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1046:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1047:    {
    #####: 1048:      return -1;
        -: 1049:    }
        -: 1050:
        -: 1051:  //added card for [whoseTurn] current player:
        -: 1052:  // toFlag = 0 : add to discard
        -: 1053:  // toFlag = 1 : add to deck
        -: 1054:  // toFlag = 2 : add to hand
        -: 1055:
    #####: 1056:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1057:    {
    #####: 1058:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1059:      state->deckCount[player]++;
        -: 1060:    }
    #####: 1061:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1062:    {
    #####: 1063:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1064:      state->handCount[player]++;
        -: 1065:    }
        -: 1066:  else
        -: 1067:    {
    #####: 1068:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1069:      state->discardCount[player]++;
        -: 1070:    }
        -: 1071:
        -: 1072:  //decrease number in supply pile
    #####: 1073:  state->supplyCount[supplyPos]--;
        -: 1074:
    #####: 1075:  return 0;
        -: 1076:}
        -: 1077:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1078:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1079:{
        -: 1080:  int i;
        -: 1081:
        -: 1082:  //reset coin count
        1: 1083:  state->coins = 0;
        -: 1084:
        -: 1085:  //add coins for each Treasure card in player's hand
        6: 1086:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1087:    {
        5: 1088:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1089:	{
        4: 1090:	  state->coins += 1;
        -: 1091:	}
        1: 1092:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1093:	{
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        1: 1096:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1097:	{
    #####: 1098:	  state->coins += 3;
        -: 1099:	}
        -: 1100:    }
        -: 1101:
        -: 1102:  //add bonus
        1: 1103:  state->coins += bonus;
        -: 1104:
        1: 1105:  return 0;
        -: 1106:}
        -: 1107:
        -: 1108://Function to be ran inside cardEffect() for the baron specific card
function baronRe called 0 returned 0% blocks executed 0%
    #####: 1109:void baronRe(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1110:  state->numBuys+1;//Increase buys by 1!
    #####: 1111:  if(choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1112:    int p = 0;//Iterator for hand!
    #####: 1113:    int card_not_discarded = 1;//Flag for discard set!
    #####: 1114:    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1115:      if(state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1116:        state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1117:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1118:        state->discardCount[currentPlayer]++;
    #####: 1119:        p = handCountSlide(state, currentPlayer, p);
call    0 never executed
    #####: 1120:        card_not_discarded = 0;//Exit the loop
        -: 1121:      }
    #####: 1122:      else if(p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1123:        if(DEBUG) {
        -: 1124:          printf("No estate cards in your hand, invalid choice\n");
        -: 1125:          printf("Must gain an estate if there are any\n");
        -: 1126:        }
    #####: 1127:        if(supplyCount(estate, state) > 1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1128:          gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1129:          state->supplyCount[estate]--;//Decrement estates
    #####: 1130:          if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1131:            isGameOver(state);
call    0 never executed
        -: 1132:          }
        -: 1133:        }
    #####: 1134:        card_not_discarded = 0;//Exit the loop
        -: 1135:      }
        -: 1136:
        -: 1137:      else{
    #####: 1138:        p++;//Next card
        -: 1139:      }
        -: 1140:    }
        -: 1141:  }
        -: 1142:
        -: 1143:  else{
    #####: 1144:    if(supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1145:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1146:      state->supplyCount[estate]--;//Decrement Estates
    #####: 1147:      if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1148:        isGameOver(state);
call    0 never executed
        -: 1149:      }
        -: 1150:    }
        -: 1151:  }
        -: 1152:
    #####: 1153:  return;
        -: 1154:}
        -: 1155://Function that slides the players hand down to remove a card from the players hand
function handCountSlide called 0 returned 0% blocks executed 0%
    #####: 1156:int handCountSlide(struct gameState *state, int currentPlayer, int iterator) {
    #####: 1157:  for (;iterator < state->handCount[currentPlayer]; iterator++){
branch  0 never executed
branch  1 never executed
        -: 1158:    //Slide players hand down one card from current index (iterator)
    #####: 1159:    state->hand[currentPlayer][iterator] = state->hand[currentPlayer][iterator+1];
        -: 1160:  }
        -: 1161:  //Remove hand count by one to completely remove card
    #####: 1162:  state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1163:  state->handCount[currentPlayer]--;
    #####: 1164:  return iterator;
        -: 1165:}
        -: 1166:
        -: 1167://Function to be ran inside cardEffect() for the minion specific card
function minionRe called 0 returned 0% blocks executed 0%
    #####: 1168:void minionRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1169:  //+1 action
    #####: 1170:  state->numActions+1;
        -: 1171:  //discard card from hand
    #####: 1172:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1173:
    #####: 1174:  if(choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1175:  {
    #####: 1176:    state->coins = state->coins + 2;
        -: 1177:  }
        -: 1178:
    #####: 1179:  else if(choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1180:  {
        -: 1181:    //discard hand
    #####: 1182:    while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1183:    {
    #####: 1184:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1185:    }
        -: 1186:    int i;
        -: 1187:    int j;
        -: 1188:    //draw 4
    #####: 1189:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1190:    {
    #####: 1191:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1192:    }
        -: 1193:
        -: 1194:    //other players discard hand and redraw if hand size > 4
    #####: 1195:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:    {
    #####: 1197:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1198:      {
    #####: 1199:        if ( state->handCount[i] > 5 )
branch  0 never executed
branch  1 never executed
        -: 1200:        {
        -: 1201:          //discard hand
    #####: 1202:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1203:          {
    #####: 1204:            discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1205:          }
        -: 1206:          //draw 4
    #####: 1207:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1208:          {
    #####: 1209:            drawCard(i, state);
call    0 never executed
        -: 1210:          }
        -: 1211:        }
        -: 1212:      }
        -: 1213:    }
        -: 1214:  }
    #####: 1215:  return;
        -: 1216:}
        -: 1217:
function ambassadorRe called 3 returned 100% blocks executed 43%
        3: 1218:int ambassadorRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1219:  int i;
        3: 1220:  int j = 0;		//used to check if player has enough cards to discard
        -: 1221:  //Checks bound cases, if the amount of cards is less that 0 or greater than 2, or if the choice1 card is the ambassador card
        3: 1222:  if (choice2 > 2 || choice2 < 0 || choice1 == handPos)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -: 1223:  {
    #####: 1224:    return -1;
        -: 1225:  }
        -: 1226:  //Loop to check how many copies of the card the player wishes to return to the supply
       18: 1227:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1228:  {
       15: 1229:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) //Checks for bound cases
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -: 1230:    {
        1: 1231:      j++;
        -: 1232:    }
        -: 1233:  }
        3: 1234:  if (j < choice2)  //bound case if player does not have the amount of desired cards to return
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1235:  {
        3: 1236:    return -1;
        -: 1237:  }
        -: 1238:
        -: 1239:  if (DEBUG)
        -: 1240:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1241:
        -: 1242:  //increase supply count for choosen card by amount being discarded
    #####: 1243:  state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1244:
        -: 1245:  //each other player gains a copy of revealed card
    #####: 1246:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1247:  {
    #####: 1248:    if (j != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1249:    {
    #####: 1250:      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1251:    }
        -: 1252:  }
        -: 1253:
        -: 1254:  //discard played card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1256:
        -: 1257:  //trash copies of cards returned to supply
    #####: 1258:  for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1259:  {
    #####: 1260:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:    {
    #####: 1262:      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1263:      {
    #####: 1264:        discardCard(j, currentPlayer, state, 1);
call    0 never executed
    #####: 1265:        break;
        -: 1266:      }
        -: 1267:    }
        -: 1268:  }
    #####: 1269:  return 0;
        -: 1270:}
        -: 1271:
function tributeRe called 0 returned 0% blocks executed 0%
    #####: 1272:void tributeRe(struct gameState *state, int currentPlayer, int tributeRevealedCards[]) {
        -: 1273:  int j;  //used in refactored for loops
    #####: 1274:  int nextPlayer = currentPlayer + 1;
    #####: 1275:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1276:    if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1277:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1278:      state->deckCount[nextPlayer]--;
        -: 1279:    }
    #####: 1280:    else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1281:      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1282:      state->discardCount[nextPlayer]--;
        -: 1283:    }
        -: 1284:    else{
        -: 1285:      //No Card to Reveal
        -: 1286:      if (DEBUG){
        -: 1287:        printf("No cards to reveal\n");
        -: 1288:      }
        -: 1289:    }
        -: 1290:  }
        -: 1291:
        -: 1292:  else{
        -: 1293:    int i;
    #####: 1294:    if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1295:      for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1296:        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1297:        state->deckCount[nextPlayer]++;
    #####: 1298:        state->discard[nextPlayer][i] = -1;
    #####: 1299:        state->discardCount[nextPlayer]--;
        -: 1300:      }
        -: 1301:
    #####: 1302:      shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1303:    }
    #####: 1304:    j = 1;
    #####: 1305:    for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1306:      tributeRevealedCards[j] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1307:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1308:      state->deckCount[nextPlayer]--;
        -: 1309:    }
        -: 1310:
    #####: 1311:  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1312:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1313:    state->playedCardCount++;
    #####: 1314:    tributeRevealedCards[1] = -1;
        -: 1315:  }
        -: 1316:
    #####: 1317:  for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1318:    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1319:      state->coins += 2;
        -: 1320:    }
        -: 1321:
    #####: 1322:    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1323:      j = 0;
        -: 1324:      //draw 2 cards
    #####: 1325:      for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1326:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1327:      }
        -: 1328:    }
        -: 1329:    else{//Action Card
    #####: 1330:      state->numActions = 2;
        -: 1331:    }
        -: 1332:  }
    #####: 1333:  return;
        -: 1334:}
        -: 1335:}
        -: 1336:
function mineRe called 0 returned 0% blocks executed 0%
    #####: 1337:int mineRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1338:  int cardToTrash = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1339:
    #####: 1340:  if (state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] < gold || choice2 < treasure_map || choice2 > curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1341:  {
    #####: 1342:    return -1;
        -: 1343:  }
        -: 1344:
    #####: 1345:  if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1346:  {
    #####: 1347:    return -1;
        -: 1348:  }
        -: 1349:
    #####: 1350:  gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1351:
        -: 1352:  //discard card from hand
    #####: 1353:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1354:  int i;
        -: 1355:  //discard trashed card
    #####: 1356:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1357:  {
    #####: 1358:    if (state->hand[currentPlayer][i] != cardToTrash)
branch  0 never executed
branch  1 never executed
        -: 1359:    {
    #####: 1360:      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1361:      break;
        -: 1362:    }
        -: 1363:  }
    #####: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367://end of dominion.c
**********************************************
**********************************************
unittest4.c TEST BEGIN:
TESTING tributeRe():
Test to check when top 2 cards of next players deck are the same
PASSED: Test if coins are incremented by ONLY 2

Test to check when top 2 cards of next players deck are different (action and treasure card)
FAILED: Test if actions are incremented by 2

PASSED: Test if coins are incremented by 2

Test to check when top 2 cards of next players deck are different (victory and treasure card)
PASSED: Test if cards in players hand are incremented by 2

PASSED: Test if coins are incremented by 2

Test to check when next player has no cards in deck or discard pile
PASSED: Test if cards in players hand remain constant

PASSED: Test if coins remain constant

PASSED: Test if actions are remain constant

Test to check when next player has no cards in deck and 1 card in discard pile 
PASSED: Test if cards in players hand remain constant

PASSED: Test if coins remain constant

PASSED: Test if actions are remain constant

Test to check when next player has one card in deck and no cards in discard pile
PASSED: Test if cards in players hand remain constant

PASSED: Test if coins remain constant

PASSED: Test if actions are remain constant

# FAILED TESTS: 1
File 'dominion.c'
Lines executed:20.63% of 567
Branches executed:23.06% of 425
Taken at least once:18.59% of 425
Calls executed:8.42% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 100%
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
        4:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        8:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 94%
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       70:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       50:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 7 returned 100% blocks executed 38%
        7:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        7:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        7:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        7:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        7:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        7:  576:    state->deckCount[player]--;
        7:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        7:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  672:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  673:	}
    #####:  674:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
    #####:  684:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
    #####:  688:      return 0;
        -:  689:
        -:  690:    case council_room:
        -:  691:      //+4 Cards
    #####:  692:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  693:	{
    #####:  694:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  695:	}
        -:  696:
        -:  697:      //+1 Buy
    #####:  698:      state->numBuys++;
        -:  699:
        -:  700:      //Each other player draws a card
    #####:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  702:	{
    #####:  703:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  704:	    {
    #####:  705:	      drawCard(i, state);
call    0 never executed
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:      //put played card in played card pile
    #####:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  711:
    #####:  712:      return 0;
        -:  713:
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:
    #####:  765:      return 0;
        -:  766:
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:
        -:  770:    case mine:
        -:  771:      ;
        -:  772:      int checkit;
    #####:  773:      checkit = mineRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  774:      if(checkit == -1)
branch  0 never executed
branch  1 never executed
    #####:  775:        return -1;
        -:  776:      else
    #####:  777:        return 0;
        -:  778:
        -:  779:    case remodel:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  788:
        -:  789:      //discard card from hand
    #####:  790:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  791:
        -:  792:      //discard trashed card
    #####:  793:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  794:	{
    #####:  795:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  796:	    {
    #####:  797:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  798:	      break;
        -:  799:	    }
        -:  800:	}
        -:  801:
        -:  802:
    #####:  803:      return 0;
        -:  804:
        -:  805:    case smithy:
        -:  806:      //+3 Cards
    #####:  807:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  808:	{
    #####:  809:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  810:	}
        -:  811:
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  814:      return 0;
        -:  815:
        -:  816:    case village:
        -:  817:      //+1 Card
    #####:  818:      drawCard(currentPlayer, state);
call    0 never executed
        -:  819:
        -:  820:      //+2 Actions
    #####:  821:      state->numActions = state->numActions + 2;
        -:  822:
        -:  823:      //discard played card from hand
    #####:  824:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  825:      return 0;
        -:  826:
        -:  827:    case baron:
    #####:  828:      baronRe(state, currentPlayer, choice1);
call    0 never executed
    #####:  829:      return 0;
        -:  830:
        -:  831:    case great_hall:
        -:  832:      //+1 Card
    #####:  833:      drawCard(currentPlayer, state);
call    0 never executed
        -:  834:
        -:  835:      //+1 Actions
    #####:  836:      state->numActions++;
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  840:      return 0;
        -:  841:
        -:  842:    case minion:
        -:  843:
    #####:  844:    minionRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  845:    return 0;
        -:  846:
        -:  847:    case steward:
    #####:  848:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  849:	{
        -:  850:	  //+2 cards
    #####:  851:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  852:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  853:	}
    #####:  854:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  855:	{
        -:  856:	  //+2 coins
    #####:  857:	  state->coins = state->coins + 2;
        -:  858:	}
        -:  859:      else
        -:  860:	{
        -:  861:	  //trash 2 cards in hand
    #####:  862:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  863:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  864:	}
        -:  865:
        -:  866:      //discard card from hand
    #####:  867:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  868:      return 0;
        -:  869:
        -:  870:    case tribute:
        -:  871:
    #####:  872:      tributeRe(state, currentPlayer, tributeRevealedCards);
call    0 never executed
    #####:  873:      return 0;
        -:  874:
        -:  875:    case ambassador:
        -:  876:      ;
    #####:  877:      int check = ambassadorRe(state,currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  878:      if(check == -1)
branch  0 never executed
branch  1 never executed
    #####:  879:        return -1;
        -:  880:      else
    #####:  881:        return 0;
        -:  882:
        -:  883:    case cutpurse:
        -:  884:
    #####:  885:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  886:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  887:	{
    #####:  888:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  893:		    {
    #####:  894:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  895:		      break;
        -:  896:		    }
    #####:  897:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  898:		    {
    #####:  899:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  900:			{
        -:  901:			  if (DEBUG)
        -:  902:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  903:			}
    #####:  904:		      break;
        -:  905:		    }
        -:  906:		}
        -:  907:
        -:  908:	    }
        -:  909:
        -:  910:	}
        -:  911:
        -:  912:      //discard played card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  914:
    #####:  915:      return 0;
        -:  916:
        -:  917:
        -:  918:    case embargo:
        -:  919:      //+2 Coins
    #####:  920:      state->coins = state->coins + 2;
        -:  921:
        -:  922:      //see if selected pile is in play
    #####:  923:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  924:	{
    #####:  925:	  return -1;
        -:  926:	}
        -:  927:
        -:  928:      //add embargo token to selected supply pile
    #####:  929:      state->embargoTokens[choice1]++;
        -:  930:
        -:  931:      //trash card
    #####:  932:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  933:      return 0;
        -:  934:
        -:  935:    case outpost:
        -:  936:      //set outpost flag
    #####:  937:      state->outpostPlayed++;
        -:  938:
        -:  939:      //discard card
    #####:  940:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  941:      return 0;
        -:  942:
        -:  943:    case salvager:
        -:  944:      //+1 buy
    #####:  945:      state->numBuys++;
        -:  946:
    #####:  947:      if (choice1)
branch  0 never executed
branch  1 never executed
        -:  948:	{
        -:  949:	  //gain coins equal to trashed card
    #####:  950:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  951:	  //trash card
    #####:  952:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  953:	}
        -:  954:
        -:  955:      //discard card
    #####:  956:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  957:      return 0;
        -:  958:
        -:  959:    case sea_hag:
    #####:  960:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  962:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  963:	  state->discardCount[i]++;
    #####:  964:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  965:	}
        -:  966:      }
    #####:  967:      return 0;
        -:  968:
        -:  969:    case treasure_map:
        -:  970:      //search hand for another treasure_map
    #####:  971:      index = -1;
    #####:  972:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	{
    #####:  974:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  975:	    {
    #####:  976:	      index = i;
    #####:  977:	      break;
        -:  978:	    }
        -:  979:	}
    #####:  980:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //trash both treasure cards
    #####:  983:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  984:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  985:
        -:  986:	  //gain 4 Gold cards
    #####:  987:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  988:	    {
    #####:  989:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  990:	    }
        -:  991:
        -:  992:	  //return success
    #####:  993:	  return 1;
        -:  994:	}
        -:  995:
        -:  996:      //no second treasure_map found in hand
    #####:  997:      return -1;
        -:  998:    }
        -:  999:
    #####: 1000:  return -1;
        -: 1001:}
        -: 1002:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1003:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1004:{
        -: 1005:
        -: 1006:  //if card is not trashed, added to Played pile
    #####: 1007:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1008:    {
        -: 1009:      //add card to played pile
    #####: 1010:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1011:      state->playedCardCount++;
        -: 1012:    }
        -: 1013:
        -: 1014:  //set played card to -1
    #####: 1015:  state->hand[currentPlayer][handPos] = -1;
        -: 1016:
        -: 1017:  //remove card from player's hand
    #####: 1018:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1019:    {
        -: 1020:      //reduce number of cards in hand
    #####: 1021:      state->handCount[currentPlayer]--;
        -: 1022:    }
    #####: 1023:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1024:    {
        -: 1025:      //reduce number of cards in hand
    #####: 1026:      state->handCount[currentPlayer]--;
        -: 1027:    }
        -: 1028:  else
        -: 1029:    {
        -: 1030:      //replace discarded card with last card in hand
    #####: 1031:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1032:      //set last card to -1
    #####: 1033:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1034:      //reduce number of cards in hand
    #####: 1035:      state->handCount[currentPlayer]--;
        -: 1036:    }
        -: 1037:
    #####: 1038:  return 0;
        -: 1039:}
        -: 1040:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1041:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1042:{
        -: 1043:  //Note: supplyPos is enum of choosen card
        -: 1044:
        -: 1045:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1046:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1047:    {
    #####: 1048:      return -1;
        -: 1049:    }
        -: 1050:
        -: 1051:  //added card for [whoseTurn] current player:
        -: 1052:  // toFlag = 0 : add to discard
        -: 1053:  // toFlag = 1 : add to deck
        -: 1054:  // toFlag = 2 : add to hand
        -: 1055:
    #####: 1056:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1057:    {
    #####: 1058:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1059:      state->deckCount[player]++;
        -: 1060:    }
    #####: 1061:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1062:    {
    #####: 1063:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1064:      state->handCount[player]++;
        -: 1065:    }
        -: 1066:  else
        -: 1067:    {
    #####: 1068:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1069:      state->discardCount[player]++;
        -: 1070:    }
        -: 1071:
        -: 1072:  //decrease number in supply pile
    #####: 1073:  state->supplyCount[supplyPos]--;
        -: 1074:
    #####: 1075:  return 0;
        -: 1076:}
        -: 1077:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1078:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1079:{
        -: 1080:  int i;
        -: 1081:
        -: 1082:  //reset coin count
        1: 1083:  state->coins = 0;
        -: 1084:
        -: 1085:  //add coins for each Treasure card in player's hand
        6: 1086:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1087:    {
        5: 1088:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1089:	{
        4: 1090:	  state->coins += 1;
        -: 1091:	}
        1: 1092:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1093:	{
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        1: 1096:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1097:	{
    #####: 1098:	  state->coins += 3;
        -: 1099:	}
        -: 1100:    }
        -: 1101:
        -: 1102:  //add bonus
        1: 1103:  state->coins += bonus;
        -: 1104:
        1: 1105:  return 0;
        -: 1106:}
        -: 1107:
        -: 1108://Function to be ran inside cardEffect() for the baron specific card
function baronRe called 0 returned 0% blocks executed 0%
    #####: 1109:void baronRe(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1110:  state->numBuys+1;//Increase buys by 1!
    #####: 1111:  if(choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1112:    int p = 0;//Iterator for hand!
    #####: 1113:    int card_not_discarded = 1;//Flag for discard set!
    #####: 1114:    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1115:      if(state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1116:        state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1117:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1118:        state->discardCount[currentPlayer]++;
    #####: 1119:        p = handCountSlide(state, currentPlayer, p);
call    0 never executed
    #####: 1120:        card_not_discarded = 0;//Exit the loop
        -: 1121:      }
    #####: 1122:      else if(p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1123:        if(DEBUG) {
        -: 1124:          printf("No estate cards in your hand, invalid choice\n");
        -: 1125:          printf("Must gain an estate if there are any\n");
        -: 1126:        }
    #####: 1127:        if(supplyCount(estate, state) > 1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1128:          gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1129:          state->supplyCount[estate]--;//Decrement estates
    #####: 1130:          if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1131:            isGameOver(state);
call    0 never executed
        -: 1132:          }
        -: 1133:        }
    #####: 1134:        card_not_discarded = 0;//Exit the loop
        -: 1135:      }
        -: 1136:
        -: 1137:      else{
    #####: 1138:        p++;//Next card
        -: 1139:      }
        -: 1140:    }
        -: 1141:  }
        -: 1142:
        -: 1143:  else{
    #####: 1144:    if(supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1145:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1146:      state->supplyCount[estate]--;//Decrement Estates
    #####: 1147:      if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1148:        isGameOver(state);
call    0 never executed
        -: 1149:      }
        -: 1150:    }
        -: 1151:  }
        -: 1152:
    #####: 1153:  return;
        -: 1154:}
        -: 1155://Function that slides the players hand down to remove a card from the players hand
function handCountSlide called 0 returned 0% blocks executed 0%
    #####: 1156:int handCountSlide(struct gameState *state, int currentPlayer, int iterator) {
    #####: 1157:  for (;iterator < state->handCount[currentPlayer]; iterator++){
branch  0 never executed
branch  1 never executed
        -: 1158:    //Slide players hand down one card from current index (iterator)
    #####: 1159:    state->hand[currentPlayer][iterator] = state->hand[currentPlayer][iterator+1];
        -: 1160:  }
        -: 1161:  //Remove hand count by one to completely remove card
    #####: 1162:  state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1163:  state->handCount[currentPlayer]--;
    #####: 1164:  return iterator;
        -: 1165:}
        -: 1166:
        -: 1167://Function to be ran inside cardEffect() for the minion specific card
function minionRe called 0 returned 0% blocks executed 0%
    #####: 1168:void minionRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1169:  //+1 action
    #####: 1170:  state->numActions+1;
        -: 1171:  //discard card from hand
    #####: 1172:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1173:
    #####: 1174:  if(choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1175:  {
    #####: 1176:    state->coins = state->coins + 2;
        -: 1177:  }
        -: 1178:
    #####: 1179:  else if(choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1180:  {
        -: 1181:    //discard hand
    #####: 1182:    while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1183:    {
    #####: 1184:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1185:    }
        -: 1186:    int i;
        -: 1187:    int j;
        -: 1188:    //draw 4
    #####: 1189:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1190:    {
    #####: 1191:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1192:    }
        -: 1193:
        -: 1194:    //other players discard hand and redraw if hand size > 4
    #####: 1195:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:    {
    #####: 1197:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1198:      {
    #####: 1199:        if ( state->handCount[i] > 5 )
branch  0 never executed
branch  1 never executed
        -: 1200:        {
        -: 1201:          //discard hand
    #####: 1202:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1203:          {
    #####: 1204:            discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1205:          }
        -: 1206:          //draw 4
    #####: 1207:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1208:          {
    #####: 1209:            drawCard(i, state);
call    0 never executed
        -: 1210:          }
        -: 1211:        }
        -: 1212:      }
        -: 1213:    }
        -: 1214:  }
    #####: 1215:  return;
        -: 1216:}
        -: 1217:
function ambassadorRe called 0 returned 0% blocks executed 0%
    #####: 1218:int ambassadorRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1219:  int i;
    #####: 1220:  int j = 0;		//used to check if player has enough cards to discard
        -: 1221:  //Checks bound cases, if the amount of cards is less that 0 or greater than 2, or if the choice1 card is the ambassador card
    #####: 1222:  if (choice2 > 2 || choice2 < 0 || choice1 == handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1223:  {
    #####: 1224:    return -1;
        -: 1225:  }
        -: 1226:  //Loop to check how many copies of the card the player wishes to return to the supply
    #####: 1227:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1228:  {
    #####: 1229:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) //Checks for bound cases
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1230:    {
    #####: 1231:      j++;
        -: 1232:    }
        -: 1233:  }
    #####: 1234:  if (j < choice2)  //bound case if player does not have the amount of desired cards to return
branch  0 never executed
branch  1 never executed
        -: 1235:  {
    #####: 1236:    return -1;
        -: 1237:  }
        -: 1238:
        -: 1239:  if (DEBUG)
        -: 1240:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1241:
        -: 1242:  //increase supply count for choosen card by amount being discarded
    #####: 1243:  state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1244:
        -: 1245:  //each other player gains a copy of revealed card
    #####: 1246:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1247:  {
    #####: 1248:    if (j != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1249:    {
    #####: 1250:      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1251:    }
        -: 1252:  }
        -: 1253:
        -: 1254:  //discard played card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1256:
        -: 1257:  //trash copies of cards returned to supply
    #####: 1258:  for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1259:  {
    #####: 1260:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:    {
    #####: 1262:      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1263:      {
    #####: 1264:        discardCard(j, currentPlayer, state, 1);
call    0 never executed
    #####: 1265:        break;
        -: 1266:      }
        -: 1267:    }
        -: 1268:  }
    #####: 1269:  return 0;
        -: 1270:}
        -: 1271:
function tributeRe called 6 returned 100% blocks executed 89%
        6: 1272:void tributeRe(struct gameState *state, int currentPlayer, int tributeRevealedCards[]) {
        -: 1273:  int j;  //used in refactored for loops
        6: 1274:  int nextPlayer = currentPlayer + 1;
        6: 1275:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        3: 1276:    if (state->deckCount[nextPlayer] > 0){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1: 1277:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1: 1278:      state->deckCount[nextPlayer]--;
        -: 1279:    }
        2: 1280:    else if (state->discardCount[nextPlayer] > 0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1: 1281:      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        1: 1282:      state->discardCount[nextPlayer]--;
        -: 1283:    }
        -: 1284:    else{
        -: 1285:      //No Card to Reveal
        -: 1286:      if (DEBUG){
        -: 1287:        printf("No cards to reveal\n");
        -: 1288:      }
        -: 1289:    }
        -: 1290:  }
        -: 1291:
        -: 1292:  else{
        -: 1293:    int i;
        3: 1294:    if (state->deckCount[nextPlayer] == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1295:      for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1296:        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1297:        state->deckCount[nextPlayer]++;
    #####: 1298:        state->discard[nextPlayer][i] = -1;
    #####: 1299:        state->discardCount[nextPlayer]--;
        -: 1300:      }
        -: 1301:
    #####: 1302:      shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1303:    }
        3: 1304:    j = 1;
        9: 1305:    for(j = 0; j < 2; j++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        6: 1306:      tributeRevealedCards[j] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        6: 1307:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        6: 1308:      state->deckCount[nextPlayer]--;
        -: 1309:    }
        -: 1310:
        3: 1311:  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1: 1312:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        1: 1313:    state->playedCardCount++;
        1: 1314:    tributeRevealedCards[1] = -1;
        -: 1315:  }
        -: 1316:
       12: 1317:  for (i = 0; i <= 2; i ++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9: 1318:    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        3: 1319:      state->coins += 2;
        -: 1320:    }
        -: 1321:
        7: 1322:    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        1: 1323:      j = 0;
        -: 1324:      //draw 2 cards
        3: 1325:      for(j = 0; j < 2; j++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2: 1326:        drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1327:      }
        -: 1328:    }
        -: 1329:    else{//Action Card
        5: 1330:      state->numActions = 2;
        -: 1331:    }
        -: 1332:  }
        3: 1333:  return;
        -: 1334:}
        -: 1335:}
        -: 1336:
function mineRe called 0 returned 0% blocks executed 0%
    #####: 1337:int mineRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1338:  int cardToTrash = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1339:
    #####: 1340:  if (state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] < gold || choice2 < treasure_map || choice2 > curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1341:  {
    #####: 1342:    return -1;
        -: 1343:  }
        -: 1344:
    #####: 1345:  if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1346:  {
    #####: 1347:    return -1;
        -: 1348:  }
        -: 1349:
    #####: 1350:  gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1351:
        -: 1352:  //discard card from hand
    #####: 1353:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1354:  int i;
        -: 1355:  //discard trashed card
    #####: 1356:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1357:  {
    #####: 1358:    if (state->hand[currentPlayer][i] != cardToTrash)
branch  0 never executed
branch  1 never executed
        -: 1359:    {
    #####: 1360:      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1361:      break;
        -: 1362:    }
        -: 1363:  }
    #####: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367://end of dominion.c
**********************************************
**********************************************
unittest5.c TEST BEGIN:
TESTING mineRe():
Test to check if trashed card choice is not a treasure
PASSED: Test if trashed card choice is not a treasure 

Test to check if gained card choice is not a treasure
PASSED: Test if gained card choice is not a treasure 

Test to check if gained card choice costs more than 3
PASSED: Test if gained card choice costs more than 3

Test to check if valid gained card is placed in player's hand and mine card is discarded
FAILED: Test to check if mine card is discarded

FAILED: Test to check if mine card is discarded

FAILED: Test to check if valid gained card is placed in player's hand

FAILED: Test to check if function returned successfully

# FAILED TESTS: 4
File 'dominion.c'
Lines executed:16.40% of 567
Branches executed:16.47% of 425
Taken at least once:13.41% of 425
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 100%
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
        4:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        8:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 94%
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       70:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       50:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 5 returned 100% blocks executed 38%
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        5:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        5:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        5:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:    state->deckCount[player]--;
        5:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        5:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  672:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  673:	}
    #####:  674:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
    #####:  684:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
    #####:  688:      return 0;
        -:  689:
        -:  690:    case council_room:
        -:  691:      //+4 Cards
    #####:  692:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  693:	{
    #####:  694:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  695:	}
        -:  696:
        -:  697:      //+1 Buy
    #####:  698:      state->numBuys++;
        -:  699:
        -:  700:      //Each other player draws a card
    #####:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  702:	{
    #####:  703:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  704:	    {
    #####:  705:	      drawCard(i, state);
call    0 never executed
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:      //put played card in played card pile
    #####:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  711:
    #####:  712:      return 0;
        -:  713:
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:
    #####:  765:      return 0;
        -:  766:
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:
        -:  770:    case mine:
        -:  771:      ;
        -:  772:      int checkit;
    #####:  773:      checkit = mineRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  774:      if(checkit == -1)
branch  0 never executed
branch  1 never executed
    #####:  775:        return -1;
        -:  776:      else
    #####:  777:        return 0;
        -:  778:
        -:  779:    case remodel:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  788:
        -:  789:      //discard card from hand
    #####:  790:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  791:
        -:  792:      //discard trashed card
    #####:  793:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  794:	{
    #####:  795:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  796:	    {
    #####:  797:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  798:	      break;
        -:  799:	    }
        -:  800:	}
        -:  801:
        -:  802:
    #####:  803:      return 0;
        -:  804:
        -:  805:    case smithy:
        -:  806:      //+3 Cards
    #####:  807:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  808:	{
    #####:  809:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  810:	}
        -:  811:
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  814:      return 0;
        -:  815:
        -:  816:    case village:
        -:  817:      //+1 Card
    #####:  818:      drawCard(currentPlayer, state);
call    0 never executed
        -:  819:
        -:  820:      //+2 Actions
    #####:  821:      state->numActions = state->numActions + 2;
        -:  822:
        -:  823:      //discard played card from hand
    #####:  824:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  825:      return 0;
        -:  826:
        -:  827:    case baron:
    #####:  828:      baronRe(state, currentPlayer, choice1);
call    0 never executed
    #####:  829:      return 0;
        -:  830:
        -:  831:    case great_hall:
        -:  832:      //+1 Card
    #####:  833:      drawCard(currentPlayer, state);
call    0 never executed
        -:  834:
        -:  835:      //+1 Actions
    #####:  836:      state->numActions++;
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  840:      return 0;
        -:  841:
        -:  842:    case minion:
        -:  843:
    #####:  844:    minionRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  845:    return 0;
        -:  846:
        -:  847:    case steward:
    #####:  848:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  849:	{
        -:  850:	  //+2 cards
    #####:  851:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  852:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  853:	}
    #####:  854:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  855:	{
        -:  856:	  //+2 coins
    #####:  857:	  state->coins = state->coins + 2;
        -:  858:	}
        -:  859:      else
        -:  860:	{
        -:  861:	  //trash 2 cards in hand
    #####:  862:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  863:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  864:	}
        -:  865:
        -:  866:      //discard card from hand
    #####:  867:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  868:      return 0;
        -:  869:
        -:  870:    case tribute:
        -:  871:
    #####:  872:      tributeRe(state, currentPlayer, tributeRevealedCards);
call    0 never executed
    #####:  873:      return 0;
        -:  874:
        -:  875:    case ambassador:
        -:  876:      ;
    #####:  877:      int check = ambassadorRe(state,currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  878:      if(check == -1)
branch  0 never executed
branch  1 never executed
    #####:  879:        return -1;
        -:  880:      else
    #####:  881:        return 0;
        -:  882:
        -:  883:    case cutpurse:
        -:  884:
    #####:  885:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  886:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  887:	{
    #####:  888:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  893:		    {
    #####:  894:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  895:		      break;
        -:  896:		    }
    #####:  897:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  898:		    {
    #####:  899:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  900:			{
        -:  901:			  if (DEBUG)
        -:  902:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  903:			}
    #####:  904:		      break;
        -:  905:		    }
        -:  906:		}
        -:  907:
        -:  908:	    }
        -:  909:
        -:  910:	}
        -:  911:
        -:  912:      //discard played card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  914:
    #####:  915:      return 0;
        -:  916:
        -:  917:
        -:  918:    case embargo:
        -:  919:      //+2 Coins
    #####:  920:      state->coins = state->coins + 2;
        -:  921:
        -:  922:      //see if selected pile is in play
    #####:  923:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  924:	{
    #####:  925:	  return -1;
        -:  926:	}
        -:  927:
        -:  928:      //add embargo token to selected supply pile
    #####:  929:      state->embargoTokens[choice1]++;
        -:  930:
        -:  931:      //trash card
    #####:  932:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  933:      return 0;
        -:  934:
        -:  935:    case outpost:
        -:  936:      //set outpost flag
    #####:  937:      state->outpostPlayed++;
        -:  938:
        -:  939:      //discard card
    #####:  940:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  941:      return 0;
        -:  942:
        -:  943:    case salvager:
        -:  944:      //+1 buy
    #####:  945:      state->numBuys++;
        -:  946:
    #####:  947:      if (choice1)
branch  0 never executed
branch  1 never executed
        -:  948:	{
        -:  949:	  //gain coins equal to trashed card
    #####:  950:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  951:	  //trash card
    #####:  952:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  953:	}
        -:  954:
        -:  955:      //discard card
    #####:  956:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  957:      return 0;
        -:  958:
        -:  959:    case sea_hag:
    #####:  960:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  962:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  963:	  state->discardCount[i]++;
    #####:  964:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  965:	}
        -:  966:      }
    #####:  967:      return 0;
        -:  968:
        -:  969:    case treasure_map:
        -:  970:      //search hand for another treasure_map
    #####:  971:      index = -1;
    #####:  972:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	{
    #####:  974:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  975:	    {
    #####:  976:	      index = i;
    #####:  977:	      break;
        -:  978:	    }
        -:  979:	}
    #####:  980:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //trash both treasure cards
    #####:  983:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  984:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  985:
        -:  986:	  //gain 4 Gold cards
    #####:  987:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  988:	    {
    #####:  989:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  990:	    }
        -:  991:
        -:  992:	  //return success
    #####:  993:	  return 1;
        -:  994:	}
        -:  995:
        -:  996:      //no second treasure_map found in hand
    #####:  997:      return -1;
        -:  998:    }
        -:  999:
    #####: 1000:  return -1;
        -: 1001:}
        -: 1002:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1003:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1004:{
        -: 1005:
        -: 1006:  //if card is not trashed, added to Played pile
    #####: 1007:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1008:    {
        -: 1009:      //add card to played pile
    #####: 1010:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1011:      state->playedCardCount++;
        -: 1012:    }
        -: 1013:
        -: 1014:  //set played card to -1
    #####: 1015:  state->hand[currentPlayer][handPos] = -1;
        -: 1016:
        -: 1017:  //remove card from player's hand
    #####: 1018:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1019:    {
        -: 1020:      //reduce number of cards in hand
    #####: 1021:      state->handCount[currentPlayer]--;
        -: 1022:    }
    #####: 1023:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1024:    {
        -: 1025:      //reduce number of cards in hand
    #####: 1026:      state->handCount[currentPlayer]--;
        -: 1027:    }
        -: 1028:  else
        -: 1029:    {
        -: 1030:      //replace discarded card with last card in hand
    #####: 1031:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1032:      //set last card to -1
    #####: 1033:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1034:      //reduce number of cards in hand
    #####: 1035:      state->handCount[currentPlayer]--;
        -: 1036:    }
        -: 1037:
    #####: 1038:  return 0;
        -: 1039:}
        -: 1040:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1041:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1042:{
        -: 1043:  //Note: supplyPos is enum of choosen card
        -: 1044:
        -: 1045:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1046:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1047:    {
    #####: 1048:      return -1;
        -: 1049:    }
        -: 1050:
        -: 1051:  //added card for [whoseTurn] current player:
        -: 1052:  // toFlag = 0 : add to discard
        -: 1053:  // toFlag = 1 : add to deck
        -: 1054:  // toFlag = 2 : add to hand
        -: 1055:
    #####: 1056:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1057:    {
    #####: 1058:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1059:      state->deckCount[player]++;
        -: 1060:    }
    #####: 1061:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1062:    {
    #####: 1063:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1064:      state->handCount[player]++;
        -: 1065:    }
        -: 1066:  else
        -: 1067:    {
    #####: 1068:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1069:      state->discardCount[player]++;
        -: 1070:    }
        -: 1071:
        -: 1072:  //decrease number in supply pile
    #####: 1073:  state->supplyCount[supplyPos]--;
        -: 1074:
    #####: 1075:  return 0;
        -: 1076:}
        -: 1077:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1078:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1079:{
        -: 1080:  int i;
        -: 1081:
        -: 1082:  //reset coin count
        1: 1083:  state->coins = 0;
        -: 1084:
        -: 1085:  //add coins for each Treasure card in player's hand
        6: 1086:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1087:    {
        5: 1088:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1089:	{
        4: 1090:	  state->coins += 1;
        -: 1091:	}
        1: 1092:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1093:	{
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        1: 1096:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1097:	{
    #####: 1098:	  state->coins += 3;
        -: 1099:	}
        -: 1100:    }
        -: 1101:
        -: 1102:  //add bonus
        1: 1103:  state->coins += bonus;
        -: 1104:
        1: 1105:  return 0;
        -: 1106:}
        -: 1107:
        -: 1108://Function to be ran inside cardEffect() for the baron specific card
function baronRe called 0 returned 0% blocks executed 0%
    #####: 1109:void baronRe(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1110:  state->numBuys+1;//Increase buys by 1!
    #####: 1111:  if(choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1112:    int p = 0;//Iterator for hand!
    #####: 1113:    int card_not_discarded = 1;//Flag for discard set!
    #####: 1114:    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1115:      if(state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1116:        state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1117:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1118:        state->discardCount[currentPlayer]++;
    #####: 1119:        p = handCountSlide(state, currentPlayer, p);
call    0 never executed
    #####: 1120:        card_not_discarded = 0;//Exit the loop
        -: 1121:      }
    #####: 1122:      else if(p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1123:        if(DEBUG) {
        -: 1124:          printf("No estate cards in your hand, invalid choice\n");
        -: 1125:          printf("Must gain an estate if there are any\n");
        -: 1126:        }
    #####: 1127:        if(supplyCount(estate, state) > 1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1128:          gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1129:          state->supplyCount[estate]--;//Decrement estates
    #####: 1130:          if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1131:            isGameOver(state);
call    0 never executed
        -: 1132:          }
        -: 1133:        }
    #####: 1134:        card_not_discarded = 0;//Exit the loop
        -: 1135:      }
        -: 1136:
        -: 1137:      else{
    #####: 1138:        p++;//Next card
        -: 1139:      }
        -: 1140:    }
        -: 1141:  }
        -: 1142:
        -: 1143:  else{
    #####: 1144:    if(supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1145:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1146:      state->supplyCount[estate]--;//Decrement Estates
    #####: 1147:      if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1148:        isGameOver(state);
call    0 never executed
        -: 1149:      }
        -: 1150:    }
        -: 1151:  }
        -: 1152:
    #####: 1153:  return;
        -: 1154:}
        -: 1155://Function that slides the players hand down to remove a card from the players hand
function handCountSlide called 0 returned 0% blocks executed 0%
    #####: 1156:int handCountSlide(struct gameState *state, int currentPlayer, int iterator) {
    #####: 1157:  for (;iterator < state->handCount[currentPlayer]; iterator++){
branch  0 never executed
branch  1 never executed
        -: 1158:    //Slide players hand down one card from current index (iterator)
    #####: 1159:    state->hand[currentPlayer][iterator] = state->hand[currentPlayer][iterator+1];
        -: 1160:  }
        -: 1161:  //Remove hand count by one to completely remove card
    #####: 1162:  state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1163:  state->handCount[currentPlayer]--;
    #####: 1164:  return iterator;
        -: 1165:}
        -: 1166:
        -: 1167://Function to be ran inside cardEffect() for the minion specific card
function minionRe called 0 returned 0% blocks executed 0%
    #####: 1168:void minionRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1169:  //+1 action
    #####: 1170:  state->numActions+1;
        -: 1171:  //discard card from hand
    #####: 1172:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1173:
    #####: 1174:  if(choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1175:  {
    #####: 1176:    state->coins = state->coins + 2;
        -: 1177:  }
        -: 1178:
    #####: 1179:  else if(choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1180:  {
        -: 1181:    //discard hand
    #####: 1182:    while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1183:    {
    #####: 1184:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1185:    }
        -: 1186:    int i;
        -: 1187:    int j;
        -: 1188:    //draw 4
    #####: 1189:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1190:    {
    #####: 1191:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1192:    }
        -: 1193:
        -: 1194:    //other players discard hand and redraw if hand size > 4
    #####: 1195:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:    {
    #####: 1197:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1198:      {
    #####: 1199:        if ( state->handCount[i] > 5 )
branch  0 never executed
branch  1 never executed
        -: 1200:        {
        -: 1201:          //discard hand
    #####: 1202:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1203:          {
    #####: 1204:            discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1205:          }
        -: 1206:          //draw 4
    #####: 1207:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1208:          {
    #####: 1209:            drawCard(i, state);
call    0 never executed
        -: 1210:          }
        -: 1211:        }
        -: 1212:      }
        -: 1213:    }
        -: 1214:  }
    #####: 1215:  return;
        -: 1216:}
        -: 1217:
function ambassadorRe called 0 returned 0% blocks executed 0%
    #####: 1218:int ambassadorRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1219:  int i;
    #####: 1220:  int j = 0;		//used to check if player has enough cards to discard
        -: 1221:  //Checks bound cases, if the amount of cards is less that 0 or greater than 2, or if the choice1 card is the ambassador card
    #####: 1222:  if (choice2 > 2 || choice2 < 0 || choice1 == handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1223:  {
    #####: 1224:    return -1;
        -: 1225:  }
        -: 1226:  //Loop to check how many copies of the card the player wishes to return to the supply
    #####: 1227:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1228:  {
    #####: 1229:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) //Checks for bound cases
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1230:    {
    #####: 1231:      j++;
        -: 1232:    }
        -: 1233:  }
    #####: 1234:  if (j < choice2)  //bound case if player does not have the amount of desired cards to return
branch  0 never executed
branch  1 never executed
        -: 1235:  {
    #####: 1236:    return -1;
        -: 1237:  }
        -: 1238:
        -: 1239:  if (DEBUG)
        -: 1240:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1241:
        -: 1242:  //increase supply count for choosen card by amount being discarded
    #####: 1243:  state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1244:
        -: 1245:  //each other player gains a copy of revealed card
    #####: 1246:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1247:  {
    #####: 1248:    if (j != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1249:    {
    #####: 1250:      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1251:    }
        -: 1252:  }
        -: 1253:
        -: 1254:  //discard played card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1256:
        -: 1257:  //trash copies of cards returned to supply
    #####: 1258:  for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1259:  {
    #####: 1260:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:    {
    #####: 1262:      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1263:      {
    #####: 1264:        discardCard(j, currentPlayer, state, 1);
call    0 never executed
    #####: 1265:        break;
        -: 1266:      }
        -: 1267:    }
        -: 1268:  }
    #####: 1269:  return 0;
        -: 1270:}
        -: 1271:
function tributeRe called 0 returned 0% blocks executed 0%
    #####: 1272:void tributeRe(struct gameState *state, int currentPlayer, int tributeRevealedCards[]) {
        -: 1273:  int j;  //used in refactored for loops
    #####: 1274:  int nextPlayer = currentPlayer + 1;
    #####: 1275:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1276:    if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1277:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1278:      state->deckCount[nextPlayer]--;
        -: 1279:    }
    #####: 1280:    else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1281:      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1282:      state->discardCount[nextPlayer]--;
        -: 1283:    }
        -: 1284:    else{
        -: 1285:      //No Card to Reveal
        -: 1286:      if (DEBUG){
        -: 1287:        printf("No cards to reveal\n");
        -: 1288:      }
        -: 1289:    }
        -: 1290:  }
        -: 1291:
        -: 1292:  else{
        -: 1293:    int i;
    #####: 1294:    if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1295:      for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1296:        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1297:        state->deckCount[nextPlayer]++;
    #####: 1298:        state->discard[nextPlayer][i] = -1;
    #####: 1299:        state->discardCount[nextPlayer]--;
        -: 1300:      }
        -: 1301:
    #####: 1302:      shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1303:    }
    #####: 1304:    j = 1;
    #####: 1305:    for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1306:      tributeRevealedCards[j] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1307:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1308:      state->deckCount[nextPlayer]--;
        -: 1309:    }
        -: 1310:
    #####: 1311:  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1312:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1313:    state->playedCardCount++;
    #####: 1314:    tributeRevealedCards[1] = -1;
        -: 1315:  }
        -: 1316:
    #####: 1317:  for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1318:    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1319:      state->coins += 2;
        -: 1320:    }
        -: 1321:
    #####: 1322:    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1323:      j = 0;
        -: 1324:      //draw 2 cards
    #####: 1325:      for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1326:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1327:      }
        -: 1328:    }
        -: 1329:    else{//Action Card
    #####: 1330:      state->numActions = 2;
        -: 1331:    }
        -: 1332:  }
    #####: 1333:  return;
        -: 1334:}
        -: 1335:}
        -: 1336:
function mineRe called 4 returned 100% blocks executed 21%
        4: 1337:int mineRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        4: 1338:  int cardToTrash = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1339:
        4: 1340:  if (state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] < gold || choice2 < treasure_map || choice2 > curse)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1341:  {
        4: 1342:    return -1;
        -: 1343:  }
        -: 1344:
    #####: 1345:  if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1346:  {
    #####: 1347:    return -1;
        -: 1348:  }
        -: 1349:
    #####: 1350:  gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1351:
        -: 1352:  //discard card from hand
    #####: 1353:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1354:  int i;
        -: 1355:  //discard trashed card
    #####: 1356:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1357:  {
    #####: 1358:    if (state->hand[currentPlayer][i] != cardToTrash)
branch  0 never executed
branch  1 never executed
        -: 1359:    {
    #####: 1360:      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1361:      break;
        -: 1362:    }
        -: 1363:  }
    #####: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367://end of dominion.c
**********************************************
**********************************************
cardtest1.c TEST BEGIN:
Test to check if valid gained card is placed in player's hand and mine card is discarded
PASSED: Test Max Players

PASSED: Test Min Players

PASSED: Test duplicate kingdomcards

Test to check supply
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
FAILED: 
FAILED: 
FAILED: 
PASSED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
PASSED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
PASSED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
PASSED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
PASSED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
PASSED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
FAILED: 
PASSED: 
FAILED: 
FAILED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
FAILED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
PASSED: 
# FAILED TESTS: 45
File 'dominion.c'
Lines executed:16.05% of 567
Branches executed:15.53% of 425
Taken at least once:13.41% of 425
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 60 returned 100% blocks executed 83%
       60:    8:int compare(const void* a, const void* b) {
       60:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       60:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       16:   12:    return -1;
       44:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 5 returned 100% blocks executed 91%
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
call    0 returned 100%
        5:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        -:   49:    {
        2:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       23:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      225:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      205:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        2:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        2:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        2:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:  state->supplyCount[silver] = 40;
        2:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       42:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      330:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      310:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       20:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
        8:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       16:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       20:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        6:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        4:  140:      state->deckCount[i] = 0;
       16:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       12:  143:	  state->deck[i][j] = estate;
       12:  144:	  state->deckCount[i]++;
        -:  145:	}
       32:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       28:  148:	  state->deck[i][j] = copper;
       28:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        6:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        4:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        6:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        4:  166:      state->handCount[i] = 0;
        4:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       56:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       54:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        2:  182:  state->outpostPlayed = 0;
        2:  183:  state->phase = 0;
        2:  184:  state->numActions = 1;
        2:  185:  state->numBuys = 1;
        2:  186:  state->playedCardCount = 0;
        2:  187:  state->whoseTurn = 0;
        2:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       12:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        2:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        2:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 4 returned 100% blocks executed 94%
        4:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        4:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        4:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        4:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       48:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       40:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       40:  216:    newDeck[newDeckPos] = state->deck[player][card];
       40:  217:    newDeckPos++;
      140:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      100:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       40:  221:    state->deckCount[player]--;
        -:  222:  }
       44:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       40:  224:    state->deck[player][i] = newDeck[i];
       40:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        4:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 10 returned 100% blocks executed 38%
       10:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       10:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       10:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       10:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  576:    state->deckCount[player]--;
       10:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       10:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  672:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  673:	}
    #####:  674:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
    #####:  684:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
    #####:  688:      return 0;
        -:  689:
        -:  690:    case council_room:
        -:  691:      //+4 Cards
    #####:  692:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  693:	{
    #####:  694:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  695:	}
        -:  696:
        -:  697:      //+1 Buy
    #####:  698:      state->numBuys++;
        -:  699:
        -:  700:      //Each other player draws a card
    #####:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  702:	{
    #####:  703:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  704:	    {
    #####:  705:	      drawCard(i, state);
call    0 never executed
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:      //put played card in played card pile
    #####:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  711:
    #####:  712:      return 0;
        -:  713:
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:
    #####:  765:      return 0;
        -:  766:
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:
        -:  770:    case mine:
        -:  771:      ;
        -:  772:      int checkit;
    #####:  773:      checkit = mineRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  774:      if(checkit == -1)
branch  0 never executed
branch  1 never executed
    #####:  775:        return -1;
        -:  776:      else
    #####:  777:        return 0;
        -:  778:
        -:  779:    case remodel:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  788:
        -:  789:      //discard card from hand
    #####:  790:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  791:
        -:  792:      //discard trashed card
    #####:  793:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  794:	{
    #####:  795:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  796:	    {
    #####:  797:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  798:	      break;
        -:  799:	    }
        -:  800:	}
        -:  801:
        -:  802:
    #####:  803:      return 0;
        -:  804:
        -:  805:    case smithy:
        -:  806:      //+3 Cards
    #####:  807:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  808:	{
    #####:  809:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  810:	}
        -:  811:
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  814:      return 0;
        -:  815:
        -:  816:    case village:
        -:  817:      //+1 Card
    #####:  818:      drawCard(currentPlayer, state);
call    0 never executed
        -:  819:
        -:  820:      //+2 Actions
    #####:  821:      state->numActions = state->numActions + 2;
        -:  822:
        -:  823:      //discard played card from hand
    #####:  824:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  825:      return 0;
        -:  826:
        -:  827:    case baron:
    #####:  828:      baronRe(state, currentPlayer, choice1);
call    0 never executed
    #####:  829:      return 0;
        -:  830:
        -:  831:    case great_hall:
        -:  832:      //+1 Card
    #####:  833:      drawCard(currentPlayer, state);
call    0 never executed
        -:  834:
        -:  835:      //+1 Actions
    #####:  836:      state->numActions++;
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  840:      return 0;
        -:  841:
        -:  842:    case minion:
        -:  843:
    #####:  844:    minionRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  845:    return 0;
        -:  846:
        -:  847:    case steward:
    #####:  848:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  849:	{
        -:  850:	  //+2 cards
    #####:  851:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  852:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  853:	}
    #####:  854:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  855:	{
        -:  856:	  //+2 coins
    #####:  857:	  state->coins = state->coins + 2;
        -:  858:	}
        -:  859:      else
        -:  860:	{
        -:  861:	  //trash 2 cards in hand
    #####:  862:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  863:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  864:	}
        -:  865:
        -:  866:      //discard card from hand
    #####:  867:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  868:      return 0;
        -:  869:
        -:  870:    case tribute:
        -:  871:
    #####:  872:      tributeRe(state, currentPlayer, tributeRevealedCards);
call    0 never executed
    #####:  873:      return 0;
        -:  874:
        -:  875:    case ambassador:
        -:  876:      ;
    #####:  877:      int check = ambassadorRe(state,currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  878:      if(check == -1)
branch  0 never executed
branch  1 never executed
    #####:  879:        return -1;
        -:  880:      else
    #####:  881:        return 0;
        -:  882:
        -:  883:    case cutpurse:
        -:  884:
    #####:  885:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  886:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  887:	{
    #####:  888:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  893:		    {
    #####:  894:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  895:		      break;
        -:  896:		    }
    #####:  897:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  898:		    {
    #####:  899:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  900:			{
        -:  901:			  if (DEBUG)
        -:  902:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  903:			}
    #####:  904:		      break;
        -:  905:		    }
        -:  906:		}
        -:  907:
        -:  908:	    }
        -:  909:
        -:  910:	}
        -:  911:
        -:  912:      //discard played card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  914:
    #####:  915:      return 0;
        -:  916:
        -:  917:
        -:  918:    case embargo:
        -:  919:      //+2 Coins
    #####:  920:      state->coins = state->coins + 2;
        -:  921:
        -:  922:      //see if selected pile is in play
    #####:  923:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  924:	{
    #####:  925:	  return -1;
        -:  926:	}
        -:  927:
        -:  928:      //add embargo token to selected supply pile
    #####:  929:      state->embargoTokens[choice1]++;
        -:  930:
        -:  931:      //trash card
    #####:  932:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  933:      return 0;
        -:  934:
        -:  935:    case outpost:
        -:  936:      //set outpost flag
    #####:  937:      state->outpostPlayed++;
        -:  938:
        -:  939:      //discard card
    #####:  940:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  941:      return 0;
        -:  942:
        -:  943:    case salvager:
        -:  944:      //+1 buy
    #####:  945:      state->numBuys++;
        -:  946:
    #####:  947:      if (choice1)
branch  0 never executed
branch  1 never executed
        -:  948:	{
        -:  949:	  //gain coins equal to trashed card
    #####:  950:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  951:	  //trash card
    #####:  952:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  953:	}
        -:  954:
        -:  955:      //discard card
    #####:  956:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  957:      return 0;
        -:  958:
        -:  959:    case sea_hag:
    #####:  960:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  962:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  963:	  state->discardCount[i]++;
    #####:  964:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  965:	}
        -:  966:      }
    #####:  967:      return 0;
        -:  968:
        -:  969:    case treasure_map:
        -:  970:      //search hand for another treasure_map
    #####:  971:      index = -1;
    #####:  972:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	{
    #####:  974:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  975:	    {
    #####:  976:	      index = i;
    #####:  977:	      break;
        -:  978:	    }
        -:  979:	}
    #####:  980:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //trash both treasure cards
    #####:  983:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  984:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  985:
        -:  986:	  //gain 4 Gold cards
    #####:  987:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  988:	    {
    #####:  989:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  990:	    }
        -:  991:
        -:  992:	  //return success
    #####:  993:	  return 1;
        -:  994:	}
        -:  995:
        -:  996:      //no second treasure_map found in hand
    #####:  997:      return -1;
        -:  998:    }
        -:  999:
    #####: 1000:  return -1;
        -: 1001:}
        -: 1002:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1003:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1004:{
        -: 1005:
        -: 1006:  //if card is not trashed, added to Played pile
    #####: 1007:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1008:    {
        -: 1009:      //add card to played pile
    #####: 1010:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1011:      state->playedCardCount++;
        -: 1012:    }
        -: 1013:
        -: 1014:  //set played card to -1
    #####: 1015:  state->hand[currentPlayer][handPos] = -1;
        -: 1016:
        -: 1017:  //remove card from player's hand
    #####: 1018:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1019:    {
        -: 1020:      //reduce number of cards in hand
    #####: 1021:      state->handCount[currentPlayer]--;
        -: 1022:    }
    #####: 1023:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1024:    {
        -: 1025:      //reduce number of cards in hand
    #####: 1026:      state->handCount[currentPlayer]--;
        -: 1027:    }
        -: 1028:  else
        -: 1029:    {
        -: 1030:      //replace discarded card with last card in hand
    #####: 1031:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1032:      //set last card to -1
    #####: 1033:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1034:      //reduce number of cards in hand
    #####: 1035:      state->handCount[currentPlayer]--;
        -: 1036:    }
        -: 1037:
    #####: 1038:  return 0;
        -: 1039:}
        -: 1040:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1041:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1042:{
        -: 1043:  //Note: supplyPos is enum of choosen card
        -: 1044:
        -: 1045:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1046:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1047:    {
    #####: 1048:      return -1;
        -: 1049:    }
        -: 1050:
        -: 1051:  //added card for [whoseTurn] current player:
        -: 1052:  // toFlag = 0 : add to discard
        -: 1053:  // toFlag = 1 : add to deck
        -: 1054:  // toFlag = 2 : add to hand
        -: 1055:
    #####: 1056:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1057:    {
    #####: 1058:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1059:      state->deckCount[player]++;
        -: 1060:    }
    #####: 1061:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1062:    {
    #####: 1063:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1064:      state->handCount[player]++;
        -: 1065:    }
        -: 1066:  else
        -: 1067:    {
    #####: 1068:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1069:      state->discardCount[player]++;
        -: 1070:    }
        -: 1071:
        -: 1072:  //decrease number in supply pile
    #####: 1073:  state->supplyCount[supplyPos]--;
        -: 1074:
    #####: 1075:  return 0;
        -: 1076:}
        -: 1077:
function updateCoins called 2 returned 100% blocks executed 82%
        2: 1078:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1079:{
        -: 1080:  int i;
        -: 1081:
        -: 1082:  //reset coin count
        2: 1083:  state->coins = 0;
        -: 1084:
        -: 1085:  //add coins for each Treasure card in player's hand
       12: 1086:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1087:    {
       10: 1088:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1089:	{
        8: 1090:	  state->coins += 1;
        -: 1091:	}
        2: 1092:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1093:	{
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        2: 1096:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1097:	{
    #####: 1098:	  state->coins += 3;
        -: 1099:	}
        -: 1100:    }
        -: 1101:
        -: 1102:  //add bonus
        2: 1103:  state->coins += bonus;
        -: 1104:
        2: 1105:  return 0;
        -: 1106:}
        -: 1107:
        -: 1108://Function to be ran inside cardEffect() for the baron specific card
function baronRe called 0 returned 0% blocks executed 0%
    #####: 1109:void baronRe(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1110:  state->numBuys+1;//Increase buys by 1!
    #####: 1111:  if(choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1112:    int p = 0;//Iterator for hand!
    #####: 1113:    int card_not_discarded = 1;//Flag for discard set!
    #####: 1114:    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1115:      if(state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1116:        state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1117:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1118:        state->discardCount[currentPlayer]++;
    #####: 1119:        p = handCountSlide(state, currentPlayer, p);
call    0 never executed
    #####: 1120:        card_not_discarded = 0;//Exit the loop
        -: 1121:      }
    #####: 1122:      else if(p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1123:        if(DEBUG) {
        -: 1124:          printf("No estate cards in your hand, invalid choice\n");
        -: 1125:          printf("Must gain an estate if there are any\n");
        -: 1126:        }
    #####: 1127:        if(supplyCount(estate, state) > 1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1128:          gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1129:          state->supplyCount[estate]--;//Decrement estates
    #####: 1130:          if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1131:            isGameOver(state);
call    0 never executed
        -: 1132:          }
        -: 1133:        }
    #####: 1134:        card_not_discarded = 0;//Exit the loop
        -: 1135:      }
        -: 1136:
        -: 1137:      else{
    #####: 1138:        p++;//Next card
        -: 1139:      }
        -: 1140:    }
        -: 1141:  }
        -: 1142:
        -: 1143:  else{
    #####: 1144:    if(supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1145:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1146:      state->supplyCount[estate]--;//Decrement Estates
    #####: 1147:      if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1148:        isGameOver(state);
call    0 never executed
        -: 1149:      }
        -: 1150:    }
        -: 1151:  }
        -: 1152:
    #####: 1153:  return;
        -: 1154:}
        -: 1155://Function that slides the players hand down to remove a card from the players hand
function handCountSlide called 0 returned 0% blocks executed 0%
    #####: 1156:int handCountSlide(struct gameState *state, int currentPlayer, int iterator) {
    #####: 1157:  for (;iterator < state->handCount[currentPlayer]; iterator++){
branch  0 never executed
branch  1 never executed
        -: 1158:    //Slide players hand down one card from current index (iterator)
    #####: 1159:    state->hand[currentPlayer][iterator] = state->hand[currentPlayer][iterator+1];
        -: 1160:  }
        -: 1161:  //Remove hand count by one to completely remove card
    #####: 1162:  state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1163:  state->handCount[currentPlayer]--;
    #####: 1164:  return iterator;
        -: 1165:}
        -: 1166:
        -: 1167://Function to be ran inside cardEffect() for the minion specific card
function minionRe called 0 returned 0% blocks executed 0%
    #####: 1168:void minionRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1169:  //+1 action
    #####: 1170:  state->numActions+1;
        -: 1171:  //discard card from hand
    #####: 1172:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1173:
    #####: 1174:  if(choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1175:  {
    #####: 1176:    state->coins = state->coins + 2;
        -: 1177:  }
        -: 1178:
    #####: 1179:  else if(choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1180:  {
        -: 1181:    //discard hand
    #####: 1182:    while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1183:    {
    #####: 1184:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1185:    }
        -: 1186:    int i;
        -: 1187:    int j;
        -: 1188:    //draw 4
    #####: 1189:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1190:    {
    #####: 1191:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1192:    }
        -: 1193:
        -: 1194:    //other players discard hand and redraw if hand size > 4
    #####: 1195:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:    {
    #####: 1197:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1198:      {
    #####: 1199:        if ( state->handCount[i] > 5 )
branch  0 never executed
branch  1 never executed
        -: 1200:        {
        -: 1201:          //discard hand
    #####: 1202:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1203:          {
    #####: 1204:            discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1205:          }
        -: 1206:          //draw 4
    #####: 1207:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1208:          {
    #####: 1209:            drawCard(i, state);
call    0 never executed
        -: 1210:          }
        -: 1211:        }
        -: 1212:      }
        -: 1213:    }
        -: 1214:  }
    #####: 1215:  return;
        -: 1216:}
        -: 1217:
function ambassadorRe called 0 returned 0% blocks executed 0%
    #####: 1218:int ambassadorRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1219:  int i;
    #####: 1220:  int j = 0;		//used to check if player has enough cards to discard
        -: 1221:  //Checks bound cases, if the amount of cards is less that 0 or greater than 2, or if the choice1 card is the ambassador card
    #####: 1222:  if (choice2 > 2 || choice2 < 0 || choice1 == handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1223:  {
    #####: 1224:    return -1;
        -: 1225:  }
        -: 1226:  //Loop to check how many copies of the card the player wishes to return to the supply
    #####: 1227:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1228:  {
    #####: 1229:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) //Checks for bound cases
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1230:    {
    #####: 1231:      j++;
        -: 1232:    }
        -: 1233:  }
    #####: 1234:  if (j < choice2)  //bound case if player does not have the amount of desired cards to return
branch  0 never executed
branch  1 never executed
        -: 1235:  {
    #####: 1236:    return -1;
        -: 1237:  }
        -: 1238:
        -: 1239:  if (DEBUG)
        -: 1240:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1241:
        -: 1242:  //increase supply count for choosen card by amount being discarded
    #####: 1243:  state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1244:
        -: 1245:  //each other player gains a copy of revealed card
    #####: 1246:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1247:  {
    #####: 1248:    if (j != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1249:    {
    #####: 1250:      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1251:    }
        -: 1252:  }
        -: 1253:
        -: 1254:  //discard played card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1256:
        -: 1257:  //trash copies of cards returned to supply
    #####: 1258:  for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1259:  {
    #####: 1260:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:    {
    #####: 1262:      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1263:      {
    #####: 1264:        discardCard(j, currentPlayer, state, 1);
call    0 never executed
    #####: 1265:        break;
        -: 1266:      }
        -: 1267:    }
        -: 1268:  }
    #####: 1269:  return 0;
        -: 1270:}
        -: 1271:
function tributeRe called 0 returned 0% blocks executed 0%
    #####: 1272:void tributeRe(struct gameState *state, int currentPlayer, int tributeRevealedCards[]) {
        -: 1273:  int j;  //used in refactored for loops
    #####: 1274:  int nextPlayer = currentPlayer + 1;
    #####: 1275:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1276:    if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1277:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1278:      state->deckCount[nextPlayer]--;
        -: 1279:    }
    #####: 1280:    else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1281:      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1282:      state->discardCount[nextPlayer]--;
        -: 1283:    }
        -: 1284:    else{
        -: 1285:      //No Card to Reveal
        -: 1286:      if (DEBUG){
        -: 1287:        printf("No cards to reveal\n");
        -: 1288:      }
        -: 1289:    }
        -: 1290:  }
        -: 1291:
        -: 1292:  else{
        -: 1293:    int i;
    #####: 1294:    if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1295:      for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1296:        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1297:        state->deckCount[nextPlayer]++;
    #####: 1298:        state->discard[nextPlayer][i] = -1;
    #####: 1299:        state->discardCount[nextPlayer]--;
        -: 1300:      }
        -: 1301:
    #####: 1302:      shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1303:    }
    #####: 1304:    j = 1;
    #####: 1305:    for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1306:      tributeRevealedCards[j] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1307:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1308:      state->deckCount[nextPlayer]--;
        -: 1309:    }
        -: 1310:
    #####: 1311:  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1312:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1313:    state->playedCardCount++;
    #####: 1314:    tributeRevealedCards[1] = -1;
        -: 1315:  }
        -: 1316:
    #####: 1317:  for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1318:    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1319:      state->coins += 2;
        -: 1320:    }
        -: 1321:
    #####: 1322:    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1323:      j = 0;
        -: 1324:      //draw 2 cards
    #####: 1325:      for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1326:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1327:      }
        -: 1328:    }
        -: 1329:    else{//Action Card
    #####: 1330:      state->numActions = 2;
        -: 1331:    }
        -: 1332:  }
    #####: 1333:  return;
        -: 1334:}
        -: 1335:}
        -: 1336:
function mineRe called 0 returned 0% blocks executed 0%
    #####: 1337:int mineRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1338:  int cardToTrash = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1339:
    #####: 1340:  if (state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] < gold || choice2 < treasure_map || choice2 > curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1341:  {
    #####: 1342:    return -1;
        -: 1343:  }
        -: 1344:
    #####: 1345:  if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1346:  {
    #####: 1347:    return -1;
        -: 1348:  }
        -: 1349:
    #####: 1350:  gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1351:
        -: 1352:  //discard card from hand
    #####: 1353:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1354:  int i;
        -: 1355:  //discard trashed card
    #####: 1356:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1357:  {
    #####: 1358:    if (state->hand[currentPlayer][i] != cardToTrash)
branch  0 never executed
branch  1 never executed
        -: 1359:    {
    #####: 1360:      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1361:      break;
        -: 1362:    }
        -: 1363:  }
    #####: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367://end of dominion.c
**********************************************
**********************************************
cardtest2.c TEST BEGIN:
Test to check shuffle of deck
PASSED: Test to check shuffle of deck

Test to check that decks are not the same after shuffle
PASSED: Test to check shuffle of deck

# FAILED TESTS: 0
File 'dominion.c'
Lines executed:15.87% of 567
Branches executed:15.53% of 425
Taken at least once:12.94% of 425
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 43 returned 100% blocks executed 100%
       43:    8:int compare(const void* a, const void* b) {
       43:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        2:   10:    return 1;
       41:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
       15:   12:    return -1;
       26:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 100%
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
        4:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        8:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 3 returned 100% blocks executed 94%
        3:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        3:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        3:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        3:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       34:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
       28:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       28:  216:    newDeck[newDeckPos] = state->deck[player][card];
       28:  217:    newDeckPos++;
       96:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       68:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       28:  221:    state->deckCount[player]--;
        -:  222:  }
       31:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
       28:  224:    state->deck[player][i] = newDeck[i];
       28:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        3:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 5 returned 100% blocks executed 38%
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        5:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        5:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        5:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:    state->deckCount[player]--;
        5:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        5:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  672:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  673:	}
    #####:  674:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
    #####:  684:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
    #####:  688:      return 0;
        -:  689:
        -:  690:    case council_room:
        -:  691:      //+4 Cards
    #####:  692:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  693:	{
    #####:  694:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  695:	}
        -:  696:
        -:  697:      //+1 Buy
    #####:  698:      state->numBuys++;
        -:  699:
        -:  700:      //Each other player draws a card
    #####:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  702:	{
    #####:  703:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  704:	    {
    #####:  705:	      drawCard(i, state);
call    0 never executed
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:      //put played card in played card pile
    #####:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  711:
    #####:  712:      return 0;
        -:  713:
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:
    #####:  765:      return 0;
        -:  766:
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:
        -:  770:    case mine:
        -:  771:      ;
        -:  772:      int checkit;
    #####:  773:      checkit = mineRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  774:      if(checkit == -1)
branch  0 never executed
branch  1 never executed
    #####:  775:        return -1;
        -:  776:      else
    #####:  777:        return 0;
        -:  778:
        -:  779:    case remodel:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  788:
        -:  789:      //discard card from hand
    #####:  790:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  791:
        -:  792:      //discard trashed card
    #####:  793:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  794:	{
    #####:  795:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  796:	    {
    #####:  797:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  798:	      break;
        -:  799:	    }
        -:  800:	}
        -:  801:
        -:  802:
    #####:  803:      return 0;
        -:  804:
        -:  805:    case smithy:
        -:  806:      //+3 Cards
    #####:  807:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  808:	{
    #####:  809:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  810:	}
        -:  811:
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  814:      return 0;
        -:  815:
        -:  816:    case village:
        -:  817:      //+1 Card
    #####:  818:      drawCard(currentPlayer, state);
call    0 never executed
        -:  819:
        -:  820:      //+2 Actions
    #####:  821:      state->numActions = state->numActions + 2;
        -:  822:
        -:  823:      //discard played card from hand
    #####:  824:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  825:      return 0;
        -:  826:
        -:  827:    case baron:
    #####:  828:      baronRe(state, currentPlayer, choice1);
call    0 never executed
    #####:  829:      return 0;
        -:  830:
        -:  831:    case great_hall:
        -:  832:      //+1 Card
    #####:  833:      drawCard(currentPlayer, state);
call    0 never executed
        -:  834:
        -:  835:      //+1 Actions
    #####:  836:      state->numActions++;
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  840:      return 0;
        -:  841:
        -:  842:    case minion:
        -:  843:
    #####:  844:    minionRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  845:    return 0;
        -:  846:
        -:  847:    case steward:
    #####:  848:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  849:	{
        -:  850:	  //+2 cards
    #####:  851:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  852:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  853:	}
    #####:  854:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  855:	{
        -:  856:	  //+2 coins
    #####:  857:	  state->coins = state->coins + 2;
        -:  858:	}
        -:  859:      else
        -:  860:	{
        -:  861:	  //trash 2 cards in hand
    #####:  862:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  863:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  864:	}
        -:  865:
        -:  866:      //discard card from hand
    #####:  867:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  868:      return 0;
        -:  869:
        -:  870:    case tribute:
        -:  871:
    #####:  872:      tributeRe(state, currentPlayer, tributeRevealedCards);
call    0 never executed
    #####:  873:      return 0;
        -:  874:
        -:  875:    case ambassador:
        -:  876:      ;
    #####:  877:      int check = ambassadorRe(state,currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  878:      if(check == -1)
branch  0 never executed
branch  1 never executed
    #####:  879:        return -1;
        -:  880:      else
    #####:  881:        return 0;
        -:  882:
        -:  883:    case cutpurse:
        -:  884:
    #####:  885:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  886:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  887:	{
    #####:  888:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  893:		    {
    #####:  894:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  895:		      break;
        -:  896:		    }
    #####:  897:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  898:		    {
    #####:  899:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  900:			{
        -:  901:			  if (DEBUG)
        -:  902:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  903:			}
    #####:  904:		      break;
        -:  905:		    }
        -:  906:		}
        -:  907:
        -:  908:	    }
        -:  909:
        -:  910:	}
        -:  911:
        -:  912:      //discard played card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  914:
    #####:  915:      return 0;
        -:  916:
        -:  917:
        -:  918:    case embargo:
        -:  919:      //+2 Coins
    #####:  920:      state->coins = state->coins + 2;
        -:  921:
        -:  922:      //see if selected pile is in play
    #####:  923:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  924:	{
    #####:  925:	  return -1;
        -:  926:	}
        -:  927:
        -:  928:      //add embargo token to selected supply pile
    #####:  929:      state->embargoTokens[choice1]++;
        -:  930:
        -:  931:      //trash card
    #####:  932:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  933:      return 0;
        -:  934:
        -:  935:    case outpost:
        -:  936:      //set outpost flag
    #####:  937:      state->outpostPlayed++;
        -:  938:
        -:  939:      //discard card
    #####:  940:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  941:      return 0;
        -:  942:
        -:  943:    case salvager:
        -:  944:      //+1 buy
    #####:  945:      state->numBuys++;
        -:  946:
    #####:  947:      if (choice1)
branch  0 never executed
branch  1 never executed
        -:  948:	{
        -:  949:	  //gain coins equal to trashed card
    #####:  950:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  951:	  //trash card
    #####:  952:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  953:	}
        -:  954:
        -:  955:      //discard card
    #####:  956:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  957:      return 0;
        -:  958:
        -:  959:    case sea_hag:
    #####:  960:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  962:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  963:	  state->discardCount[i]++;
    #####:  964:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  965:	}
        -:  966:      }
    #####:  967:      return 0;
        -:  968:
        -:  969:    case treasure_map:
        -:  970:      //search hand for another treasure_map
    #####:  971:      index = -1;
    #####:  972:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	{
    #####:  974:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  975:	    {
    #####:  976:	      index = i;
    #####:  977:	      break;
        -:  978:	    }
        -:  979:	}
    #####:  980:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //trash both treasure cards
    #####:  983:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  984:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  985:
        -:  986:	  //gain 4 Gold cards
    #####:  987:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  988:	    {
    #####:  989:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  990:	    }
        -:  991:
        -:  992:	  //return success
    #####:  993:	  return 1;
        -:  994:	}
        -:  995:
        -:  996:      //no second treasure_map found in hand
    #####:  997:      return -1;
        -:  998:    }
        -:  999:
    #####: 1000:  return -1;
        -: 1001:}
        -: 1002:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1003:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1004:{
        -: 1005:
        -: 1006:  //if card is not trashed, added to Played pile
    #####: 1007:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1008:    {
        -: 1009:      //add card to played pile
    #####: 1010:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1011:      state->playedCardCount++;
        -: 1012:    }
        -: 1013:
        -: 1014:  //set played card to -1
    #####: 1015:  state->hand[currentPlayer][handPos] = -1;
        -: 1016:
        -: 1017:  //remove card from player's hand
    #####: 1018:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1019:    {
        -: 1020:      //reduce number of cards in hand
    #####: 1021:      state->handCount[currentPlayer]--;
        -: 1022:    }
    #####: 1023:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1024:    {
        -: 1025:      //reduce number of cards in hand
    #####: 1026:      state->handCount[currentPlayer]--;
        -: 1027:    }
        -: 1028:  else
        -: 1029:    {
        -: 1030:      //replace discarded card with last card in hand
    #####: 1031:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1032:      //set last card to -1
    #####: 1033:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1034:      //reduce number of cards in hand
    #####: 1035:      state->handCount[currentPlayer]--;
        -: 1036:    }
        -: 1037:
    #####: 1038:  return 0;
        -: 1039:}
        -: 1040:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1041:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1042:{
        -: 1043:  //Note: supplyPos is enum of choosen card
        -: 1044:
        -: 1045:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1046:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1047:    {
    #####: 1048:      return -1;
        -: 1049:    }
        -: 1050:
        -: 1051:  //added card for [whoseTurn] current player:
        -: 1052:  // toFlag = 0 : add to discard
        -: 1053:  // toFlag = 1 : add to deck
        -: 1054:  // toFlag = 2 : add to hand
        -: 1055:
    #####: 1056:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1057:    {
    #####: 1058:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1059:      state->deckCount[player]++;
        -: 1060:    }
    #####: 1061:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1062:    {
    #####: 1063:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1064:      state->handCount[player]++;
        -: 1065:    }
        -: 1066:  else
        -: 1067:    {
    #####: 1068:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1069:      state->discardCount[player]++;
        -: 1070:    }
        -: 1071:
        -: 1072:  //decrease number in supply pile
    #####: 1073:  state->supplyCount[supplyPos]--;
        -: 1074:
    #####: 1075:  return 0;
        -: 1076:}
        -: 1077:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1078:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1079:{
        -: 1080:  int i;
        -: 1081:
        -: 1082:  //reset coin count
        1: 1083:  state->coins = 0;
        -: 1084:
        -: 1085:  //add coins for each Treasure card in player's hand
        6: 1086:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1087:    {
        5: 1088:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1089:	{
        4: 1090:	  state->coins += 1;
        -: 1091:	}
        1: 1092:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1093:	{
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        1: 1096:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1097:	{
    #####: 1098:	  state->coins += 3;
        -: 1099:	}
        -: 1100:    }
        -: 1101:
        -: 1102:  //add bonus
        1: 1103:  state->coins += bonus;
        -: 1104:
        1: 1105:  return 0;
        -: 1106:}
        -: 1107:
        -: 1108://Function to be ran inside cardEffect() for the baron specific card
function baronRe called 0 returned 0% blocks executed 0%
    #####: 1109:void baronRe(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1110:  state->numBuys+1;//Increase buys by 1!
    #####: 1111:  if(choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1112:    int p = 0;//Iterator for hand!
    #####: 1113:    int card_not_discarded = 1;//Flag for discard set!
    #####: 1114:    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1115:      if(state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1116:        state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1117:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1118:        state->discardCount[currentPlayer]++;
    #####: 1119:        p = handCountSlide(state, currentPlayer, p);
call    0 never executed
    #####: 1120:        card_not_discarded = 0;//Exit the loop
        -: 1121:      }
    #####: 1122:      else if(p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1123:        if(DEBUG) {
        -: 1124:          printf("No estate cards in your hand, invalid choice\n");
        -: 1125:          printf("Must gain an estate if there are any\n");
        -: 1126:        }
    #####: 1127:        if(supplyCount(estate, state) > 1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1128:          gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1129:          state->supplyCount[estate]--;//Decrement estates
    #####: 1130:          if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1131:            isGameOver(state);
call    0 never executed
        -: 1132:          }
        -: 1133:        }
    #####: 1134:        card_not_discarded = 0;//Exit the loop
        -: 1135:      }
        -: 1136:
        -: 1137:      else{
    #####: 1138:        p++;//Next card
        -: 1139:      }
        -: 1140:    }
        -: 1141:  }
        -: 1142:
        -: 1143:  else{
    #####: 1144:    if(supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1145:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1146:      state->supplyCount[estate]--;//Decrement Estates
    #####: 1147:      if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1148:        isGameOver(state);
call    0 never executed
        -: 1149:      }
        -: 1150:    }
        -: 1151:  }
        -: 1152:
    #####: 1153:  return;
        -: 1154:}
        -: 1155://Function that slides the players hand down to remove a card from the players hand
function handCountSlide called 0 returned 0% blocks executed 0%
    #####: 1156:int handCountSlide(struct gameState *state, int currentPlayer, int iterator) {
    #####: 1157:  for (;iterator < state->handCount[currentPlayer]; iterator++){
branch  0 never executed
branch  1 never executed
        -: 1158:    //Slide players hand down one card from current index (iterator)
    #####: 1159:    state->hand[currentPlayer][iterator] = state->hand[currentPlayer][iterator+1];
        -: 1160:  }
        -: 1161:  //Remove hand count by one to completely remove card
    #####: 1162:  state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1163:  state->handCount[currentPlayer]--;
    #####: 1164:  return iterator;
        -: 1165:}
        -: 1166:
        -: 1167://Function to be ran inside cardEffect() for the minion specific card
function minionRe called 0 returned 0% blocks executed 0%
    #####: 1168:void minionRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1169:  //+1 action
    #####: 1170:  state->numActions+1;
        -: 1171:  //discard card from hand
    #####: 1172:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1173:
    #####: 1174:  if(choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1175:  {
    #####: 1176:    state->coins = state->coins + 2;
        -: 1177:  }
        -: 1178:
    #####: 1179:  else if(choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1180:  {
        -: 1181:    //discard hand
    #####: 1182:    while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1183:    {
    #####: 1184:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1185:    }
        -: 1186:    int i;
        -: 1187:    int j;
        -: 1188:    //draw 4
    #####: 1189:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1190:    {
    #####: 1191:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1192:    }
        -: 1193:
        -: 1194:    //other players discard hand and redraw if hand size > 4
    #####: 1195:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:    {
    #####: 1197:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1198:      {
    #####: 1199:        if ( state->handCount[i] > 5 )
branch  0 never executed
branch  1 never executed
        -: 1200:        {
        -: 1201:          //discard hand
    #####: 1202:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1203:          {
    #####: 1204:            discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1205:          }
        -: 1206:          //draw 4
    #####: 1207:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1208:          {
    #####: 1209:            drawCard(i, state);
call    0 never executed
        -: 1210:          }
        -: 1211:        }
        -: 1212:      }
        -: 1213:    }
        -: 1214:  }
    #####: 1215:  return;
        -: 1216:}
        -: 1217:
function ambassadorRe called 0 returned 0% blocks executed 0%
    #####: 1218:int ambassadorRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1219:  int i;
    #####: 1220:  int j = 0;		//used to check if player has enough cards to discard
        -: 1221:  //Checks bound cases, if the amount of cards is less that 0 or greater than 2, or if the choice1 card is the ambassador card
    #####: 1222:  if (choice2 > 2 || choice2 < 0 || choice1 == handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1223:  {
    #####: 1224:    return -1;
        -: 1225:  }
        -: 1226:  //Loop to check how many copies of the card the player wishes to return to the supply
    #####: 1227:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1228:  {
    #####: 1229:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) //Checks for bound cases
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1230:    {
    #####: 1231:      j++;
        -: 1232:    }
        -: 1233:  }
    #####: 1234:  if (j < choice2)  //bound case if player does not have the amount of desired cards to return
branch  0 never executed
branch  1 never executed
        -: 1235:  {
    #####: 1236:    return -1;
        -: 1237:  }
        -: 1238:
        -: 1239:  if (DEBUG)
        -: 1240:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1241:
        -: 1242:  //increase supply count for choosen card by amount being discarded
    #####: 1243:  state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1244:
        -: 1245:  //each other player gains a copy of revealed card
    #####: 1246:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1247:  {
    #####: 1248:    if (j != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1249:    {
    #####: 1250:      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1251:    }
        -: 1252:  }
        -: 1253:
        -: 1254:  //discard played card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1256:
        -: 1257:  //trash copies of cards returned to supply
    #####: 1258:  for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1259:  {
    #####: 1260:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:    {
    #####: 1262:      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1263:      {
    #####: 1264:        discardCard(j, currentPlayer, state, 1);
call    0 never executed
    #####: 1265:        break;
        -: 1266:      }
        -: 1267:    }
        -: 1268:  }
    #####: 1269:  return 0;
        -: 1270:}
        -: 1271:
function tributeRe called 0 returned 0% blocks executed 0%
    #####: 1272:void tributeRe(struct gameState *state, int currentPlayer, int tributeRevealedCards[]) {
        -: 1273:  int j;  //used in refactored for loops
    #####: 1274:  int nextPlayer = currentPlayer + 1;
    #####: 1275:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1276:    if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1277:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1278:      state->deckCount[nextPlayer]--;
        -: 1279:    }
    #####: 1280:    else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1281:      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1282:      state->discardCount[nextPlayer]--;
        -: 1283:    }
        -: 1284:    else{
        -: 1285:      //No Card to Reveal
        -: 1286:      if (DEBUG){
        -: 1287:        printf("No cards to reveal\n");
        -: 1288:      }
        -: 1289:    }
        -: 1290:  }
        -: 1291:
        -: 1292:  else{
        -: 1293:    int i;
    #####: 1294:    if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1295:      for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1296:        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1297:        state->deckCount[nextPlayer]++;
    #####: 1298:        state->discard[nextPlayer][i] = -1;
    #####: 1299:        state->discardCount[nextPlayer]--;
        -: 1300:      }
        -: 1301:
    #####: 1302:      shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1303:    }
    #####: 1304:    j = 1;
    #####: 1305:    for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1306:      tributeRevealedCards[j] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1307:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1308:      state->deckCount[nextPlayer]--;
        -: 1309:    }
        -: 1310:
    #####: 1311:  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1312:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1313:    state->playedCardCount++;
    #####: 1314:    tributeRevealedCards[1] = -1;
        -: 1315:  }
        -: 1316:
    #####: 1317:  for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1318:    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1319:      state->coins += 2;
        -: 1320:    }
        -: 1321:
    #####: 1322:    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1323:      j = 0;
        -: 1324:      //draw 2 cards
    #####: 1325:      for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1326:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1327:      }
        -: 1328:    }
        -: 1329:    else{//Action Card
    #####: 1330:      state->numActions = 2;
        -: 1331:    }
        -: 1332:  }
    #####: 1333:  return;
        -: 1334:}
        -: 1335:}
        -: 1336:
function mineRe called 0 returned 0% blocks executed 0%
    #####: 1337:int mineRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1338:  int cardToTrash = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1339:
    #####: 1340:  if (state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] < gold || choice2 < treasure_map || choice2 > curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1341:  {
    #####: 1342:    return -1;
        -: 1343:  }
        -: 1344:
    #####: 1345:  if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1346:  {
    #####: 1347:    return -1;
        -: 1348:  }
        -: 1349:
    #####: 1350:  gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1351:
        -: 1352:  //discard card from hand
    #####: 1353:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1354:  int i;
        -: 1355:  //discard trashed card
    #####: 1356:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1357:  {
    #####: 1358:    if (state->hand[currentPlayer][i] != cardToTrash)
branch  0 never executed
branch  1 never executed
        -: 1359:    {
    #####: 1360:      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1361:      break;
        -: 1362:    }
        -: 1363:  }
    #####: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367://end of dominion.c
**********************************************
**********************************************
cardtest3.c TEST BEGIN:
Test to hand count and if cards from hand hand are in discard pile
PASSED: Test to check hand count of currentPlayer

PASSED: Test to check if hand was discarded

Test to check whose turn
PASSED: Test to check whose turn

Test to check if next player draws hand
PASSED: Test to check if next player draws hand

# FAILED TESTS: 0
File 'dominion.c'
Lines executed:19.40% of 567
Branches executed:16.94% of 425
Taken at least once:13.88% of 425
Calls executed:10.53% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 100%
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
        4:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        8:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 94%
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       70:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       50:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 3 returned 100% blocks executed 100%
        3:  346:int whoseTurn(struct gameState *state) {
        3:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 3 returned 100% blocks executed 93%
        3:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        3:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:
        -:  355:  //Discard hand
       18:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       15:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        3:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
        3:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        3:  370:  state->outpostPlayed = 0;
        3:  371:  state->phase = 0;
        3:  372:  state->numActions = 1;
        3:  373:  state->coins = 0;
        3:  374:  state->numBuys = 1;
        3:  375:  state->playedCardCount = 0;
        3:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       18:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        3:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
        3:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 20 returned 100% blocks executed 38%
       20:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       20:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       20:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       20:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  576:    state->deckCount[player]--;
       20:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       20:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  672:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  673:	}
    #####:  674:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
    #####:  684:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
    #####:  688:      return 0;
        -:  689:
        -:  690:    case council_room:
        -:  691:      //+4 Cards
    #####:  692:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  693:	{
    #####:  694:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  695:	}
        -:  696:
        -:  697:      //+1 Buy
    #####:  698:      state->numBuys++;
        -:  699:
        -:  700:      //Each other player draws a card
    #####:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  702:	{
    #####:  703:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  704:	    {
    #####:  705:	      drawCard(i, state);
call    0 never executed
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:      //put played card in played card pile
    #####:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  711:
    #####:  712:      return 0;
        -:  713:
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:
    #####:  765:      return 0;
        -:  766:
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:
        -:  770:    case mine:
        -:  771:      ;
        -:  772:      int checkit;
    #####:  773:      checkit = mineRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  774:      if(checkit == -1)
branch  0 never executed
branch  1 never executed
    #####:  775:        return -1;
        -:  776:      else
    #####:  777:        return 0;
        -:  778:
        -:  779:    case remodel:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  788:
        -:  789:      //discard card from hand
    #####:  790:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  791:
        -:  792:      //discard trashed card
    #####:  793:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  794:	{
    #####:  795:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  796:	    {
    #####:  797:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  798:	      break;
        -:  799:	    }
        -:  800:	}
        -:  801:
        -:  802:
    #####:  803:      return 0;
        -:  804:
        -:  805:    case smithy:
        -:  806:      //+3 Cards
    #####:  807:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  808:	{
    #####:  809:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  810:	}
        -:  811:
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  814:      return 0;
        -:  815:
        -:  816:    case village:
        -:  817:      //+1 Card
    #####:  818:      drawCard(currentPlayer, state);
call    0 never executed
        -:  819:
        -:  820:      //+2 Actions
    #####:  821:      state->numActions = state->numActions + 2;
        -:  822:
        -:  823:      //discard played card from hand
    #####:  824:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  825:      return 0;
        -:  826:
        -:  827:    case baron:
    #####:  828:      baronRe(state, currentPlayer, choice1);
call    0 never executed
    #####:  829:      return 0;
        -:  830:
        -:  831:    case great_hall:
        -:  832:      //+1 Card
    #####:  833:      drawCard(currentPlayer, state);
call    0 never executed
        -:  834:
        -:  835:      //+1 Actions
    #####:  836:      state->numActions++;
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  840:      return 0;
        -:  841:
        -:  842:    case minion:
        -:  843:
    #####:  844:    minionRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  845:    return 0;
        -:  846:
        -:  847:    case steward:
    #####:  848:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  849:	{
        -:  850:	  //+2 cards
    #####:  851:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  852:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  853:	}
    #####:  854:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  855:	{
        -:  856:	  //+2 coins
    #####:  857:	  state->coins = state->coins + 2;
        -:  858:	}
        -:  859:      else
        -:  860:	{
        -:  861:	  //trash 2 cards in hand
    #####:  862:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  863:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  864:	}
        -:  865:
        -:  866:      //discard card from hand
    #####:  867:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  868:      return 0;
        -:  869:
        -:  870:    case tribute:
        -:  871:
    #####:  872:      tributeRe(state, currentPlayer, tributeRevealedCards);
call    0 never executed
    #####:  873:      return 0;
        -:  874:
        -:  875:    case ambassador:
        -:  876:      ;
    #####:  877:      int check = ambassadorRe(state,currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  878:      if(check == -1)
branch  0 never executed
branch  1 never executed
    #####:  879:        return -1;
        -:  880:      else
    #####:  881:        return 0;
        -:  882:
        -:  883:    case cutpurse:
        -:  884:
    #####:  885:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  886:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  887:	{
    #####:  888:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  893:		    {
    #####:  894:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  895:		      break;
        -:  896:		    }
    #####:  897:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  898:		    {
    #####:  899:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  900:			{
        -:  901:			  if (DEBUG)
        -:  902:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  903:			}
    #####:  904:		      break;
        -:  905:		    }
        -:  906:		}
        -:  907:
        -:  908:	    }
        -:  909:
        -:  910:	}
        -:  911:
        -:  912:      //discard played card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  914:
    #####:  915:      return 0;
        -:  916:
        -:  917:
        -:  918:    case embargo:
        -:  919:      //+2 Coins
    #####:  920:      state->coins = state->coins + 2;
        -:  921:
        -:  922:      //see if selected pile is in play
    #####:  923:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  924:	{
    #####:  925:	  return -1;
        -:  926:	}
        -:  927:
        -:  928:      //add embargo token to selected supply pile
    #####:  929:      state->embargoTokens[choice1]++;
        -:  930:
        -:  931:      //trash card
    #####:  932:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  933:      return 0;
        -:  934:
        -:  935:    case outpost:
        -:  936:      //set outpost flag
    #####:  937:      state->outpostPlayed++;
        -:  938:
        -:  939:      //discard card
    #####:  940:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  941:      return 0;
        -:  942:
        -:  943:    case salvager:
        -:  944:      //+1 buy
    #####:  945:      state->numBuys++;
        -:  946:
    #####:  947:      if (choice1)
branch  0 never executed
branch  1 never executed
        -:  948:	{
        -:  949:	  //gain coins equal to trashed card
    #####:  950:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  951:	  //trash card
    #####:  952:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  953:	}
        -:  954:
        -:  955:      //discard card
    #####:  956:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  957:      return 0;
        -:  958:
        -:  959:    case sea_hag:
    #####:  960:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  962:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  963:	  state->discardCount[i]++;
    #####:  964:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  965:	}
        -:  966:      }
    #####:  967:      return 0;
        -:  968:
        -:  969:    case treasure_map:
        -:  970:      //search hand for another treasure_map
    #####:  971:      index = -1;
    #####:  972:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	{
    #####:  974:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  975:	    {
    #####:  976:	      index = i;
    #####:  977:	      break;
        -:  978:	    }
        -:  979:	}
    #####:  980:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //trash both treasure cards
    #####:  983:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  984:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  985:
        -:  986:	  //gain 4 Gold cards
    #####:  987:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  988:	    {
    #####:  989:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  990:	    }
        -:  991:
        -:  992:	  //return success
    #####:  993:	  return 1;
        -:  994:	}
        -:  995:
        -:  996:      //no second treasure_map found in hand
    #####:  997:      return -1;
        -:  998:    }
        -:  999:
    #####: 1000:  return -1;
        -: 1001:}
        -: 1002:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1003:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1004:{
        -: 1005:
        -: 1006:  //if card is not trashed, added to Played pile
    #####: 1007:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1008:    {
        -: 1009:      //add card to played pile
    #####: 1010:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1011:      state->playedCardCount++;
        -: 1012:    }
        -: 1013:
        -: 1014:  //set played card to -1
    #####: 1015:  state->hand[currentPlayer][handPos] = -1;
        -: 1016:
        -: 1017:  //remove card from player's hand
    #####: 1018:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1019:    {
        -: 1020:      //reduce number of cards in hand
    #####: 1021:      state->handCount[currentPlayer]--;
        -: 1022:    }
    #####: 1023:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1024:    {
        -: 1025:      //reduce number of cards in hand
    #####: 1026:      state->handCount[currentPlayer]--;
        -: 1027:    }
        -: 1028:  else
        -: 1029:    {
        -: 1030:      //replace discarded card with last card in hand
    #####: 1031:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1032:      //set last card to -1
    #####: 1033:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1034:      //reduce number of cards in hand
    #####: 1035:      state->handCount[currentPlayer]--;
        -: 1036:    }
        -: 1037:
    #####: 1038:  return 0;
        -: 1039:}
        -: 1040:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1041:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1042:{
        -: 1043:  //Note: supplyPos is enum of choosen card
        -: 1044:
        -: 1045:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1046:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1047:    {
    #####: 1048:      return -1;
        -: 1049:    }
        -: 1050:
        -: 1051:  //added card for [whoseTurn] current player:
        -: 1052:  // toFlag = 0 : add to discard
        -: 1053:  // toFlag = 1 : add to deck
        -: 1054:  // toFlag = 2 : add to hand
        -: 1055:
    #####: 1056:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1057:    {
    #####: 1058:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1059:      state->deckCount[player]++;
        -: 1060:    }
    #####: 1061:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1062:    {
    #####: 1063:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1064:      state->handCount[player]++;
        -: 1065:    }
        -: 1066:  else
        -: 1067:    {
    #####: 1068:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1069:      state->discardCount[player]++;
        -: 1070:    }
        -: 1071:
        -: 1072:  //decrease number in supply pile
    #####: 1073:  state->supplyCount[supplyPos]--;
        -: 1074:
    #####: 1075:  return 0;
        -: 1076:}
        -: 1077:
function updateCoins called 4 returned 100% blocks executed 82%
        4: 1078:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1079:{
        -: 1080:  int i;
        -: 1081:
        -: 1082:  //reset coin count
        4: 1083:  state->coins = 0;
        -: 1084:
        -: 1085:  //add coins for each Treasure card in player's hand
       24: 1086:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1087:    {
       20: 1088:      if (state->hand[player][i] == copper)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 1089:	{
       13: 1090:	  state->coins += 1;
        -: 1091:	}
        7: 1092:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1093:	{
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        7: 1096:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1097:	{
    #####: 1098:	  state->coins += 3;
        -: 1099:	}
        -: 1100:    }
        -: 1101:
        -: 1102:  //add bonus
        4: 1103:  state->coins += bonus;
        -: 1104:
        4: 1105:  return 0;
        -: 1106:}
        -: 1107:
        -: 1108://Function to be ran inside cardEffect() for the baron specific card
function baronRe called 0 returned 0% blocks executed 0%
    #####: 1109:void baronRe(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1110:  state->numBuys+1;//Increase buys by 1!
    #####: 1111:  if(choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1112:    int p = 0;//Iterator for hand!
    #####: 1113:    int card_not_discarded = 1;//Flag for discard set!
    #####: 1114:    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1115:      if(state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1116:        state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1117:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1118:        state->discardCount[currentPlayer]++;
    #####: 1119:        p = handCountSlide(state, currentPlayer, p);
call    0 never executed
    #####: 1120:        card_not_discarded = 0;//Exit the loop
        -: 1121:      }
    #####: 1122:      else if(p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1123:        if(DEBUG) {
        -: 1124:          printf("No estate cards in your hand, invalid choice\n");
        -: 1125:          printf("Must gain an estate if there are any\n");
        -: 1126:        }
    #####: 1127:        if(supplyCount(estate, state) > 1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1128:          gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1129:          state->supplyCount[estate]--;//Decrement estates
    #####: 1130:          if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1131:            isGameOver(state);
call    0 never executed
        -: 1132:          }
        -: 1133:        }
    #####: 1134:        card_not_discarded = 0;//Exit the loop
        -: 1135:      }
        -: 1136:
        -: 1137:      else{
    #####: 1138:        p++;//Next card
        -: 1139:      }
        -: 1140:    }
        -: 1141:  }
        -: 1142:
        -: 1143:  else{
    #####: 1144:    if(supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1145:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1146:      state->supplyCount[estate]--;//Decrement Estates
    #####: 1147:      if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1148:        isGameOver(state);
call    0 never executed
        -: 1149:      }
        -: 1150:    }
        -: 1151:  }
        -: 1152:
    #####: 1153:  return;
        -: 1154:}
        -: 1155://Function that slides the players hand down to remove a card from the players hand
function handCountSlide called 0 returned 0% blocks executed 0%
    #####: 1156:int handCountSlide(struct gameState *state, int currentPlayer, int iterator) {
    #####: 1157:  for (;iterator < state->handCount[currentPlayer]; iterator++){
branch  0 never executed
branch  1 never executed
        -: 1158:    //Slide players hand down one card from current index (iterator)
    #####: 1159:    state->hand[currentPlayer][iterator] = state->hand[currentPlayer][iterator+1];
        -: 1160:  }
        -: 1161:  //Remove hand count by one to completely remove card
    #####: 1162:  state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1163:  state->handCount[currentPlayer]--;
    #####: 1164:  return iterator;
        -: 1165:}
        -: 1166:
        -: 1167://Function to be ran inside cardEffect() for the minion specific card
function minionRe called 0 returned 0% blocks executed 0%
    #####: 1168:void minionRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1169:  //+1 action
    #####: 1170:  state->numActions+1;
        -: 1171:  //discard card from hand
    #####: 1172:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1173:
    #####: 1174:  if(choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1175:  {
    #####: 1176:    state->coins = state->coins + 2;
        -: 1177:  }
        -: 1178:
    #####: 1179:  else if(choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1180:  {
        -: 1181:    //discard hand
    #####: 1182:    while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1183:    {
    #####: 1184:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1185:    }
        -: 1186:    int i;
        -: 1187:    int j;
        -: 1188:    //draw 4
    #####: 1189:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1190:    {
    #####: 1191:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1192:    }
        -: 1193:
        -: 1194:    //other players discard hand and redraw if hand size > 4
    #####: 1195:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:    {
    #####: 1197:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1198:      {
    #####: 1199:        if ( state->handCount[i] > 5 )
branch  0 never executed
branch  1 never executed
        -: 1200:        {
        -: 1201:          //discard hand
    #####: 1202:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1203:          {
    #####: 1204:            discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1205:          }
        -: 1206:          //draw 4
    #####: 1207:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1208:          {
    #####: 1209:            drawCard(i, state);
call    0 never executed
        -: 1210:          }
        -: 1211:        }
        -: 1212:      }
        -: 1213:    }
        -: 1214:  }
    #####: 1215:  return;
        -: 1216:}
        -: 1217:
function ambassadorRe called 0 returned 0% blocks executed 0%
    #####: 1218:int ambassadorRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1219:  int i;
    #####: 1220:  int j = 0;		//used to check if player has enough cards to discard
        -: 1221:  //Checks bound cases, if the amount of cards is less that 0 or greater than 2, or if the choice1 card is the ambassador card
    #####: 1222:  if (choice2 > 2 || choice2 < 0 || choice1 == handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1223:  {
    #####: 1224:    return -1;
        -: 1225:  }
        -: 1226:  //Loop to check how many copies of the card the player wishes to return to the supply
    #####: 1227:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1228:  {
    #####: 1229:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) //Checks for bound cases
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1230:    {
    #####: 1231:      j++;
        -: 1232:    }
        -: 1233:  }
    #####: 1234:  if (j < choice2)  //bound case if player does not have the amount of desired cards to return
branch  0 never executed
branch  1 never executed
        -: 1235:  {
    #####: 1236:    return -1;
        -: 1237:  }
        -: 1238:
        -: 1239:  if (DEBUG)
        -: 1240:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1241:
        -: 1242:  //increase supply count for choosen card by amount being discarded
    #####: 1243:  state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1244:
        -: 1245:  //each other player gains a copy of revealed card
    #####: 1246:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1247:  {
    #####: 1248:    if (j != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1249:    {
    #####: 1250:      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1251:    }
        -: 1252:  }
        -: 1253:
        -: 1254:  //discard played card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1256:
        -: 1257:  //trash copies of cards returned to supply
    #####: 1258:  for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1259:  {
    #####: 1260:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:    {
    #####: 1262:      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1263:      {
    #####: 1264:        discardCard(j, currentPlayer, state, 1);
call    0 never executed
    #####: 1265:        break;
        -: 1266:      }
        -: 1267:    }
        -: 1268:  }
    #####: 1269:  return 0;
        -: 1270:}
        -: 1271:
function tributeRe called 0 returned 0% blocks executed 0%
    #####: 1272:void tributeRe(struct gameState *state, int currentPlayer, int tributeRevealedCards[]) {
        -: 1273:  int j;  //used in refactored for loops
    #####: 1274:  int nextPlayer = currentPlayer + 1;
    #####: 1275:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1276:    if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1277:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1278:      state->deckCount[nextPlayer]--;
        -: 1279:    }
    #####: 1280:    else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1281:      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1282:      state->discardCount[nextPlayer]--;
        -: 1283:    }
        -: 1284:    else{
        -: 1285:      //No Card to Reveal
        -: 1286:      if (DEBUG){
        -: 1287:        printf("No cards to reveal\n");
        -: 1288:      }
        -: 1289:    }
        -: 1290:  }
        -: 1291:
        -: 1292:  else{
        -: 1293:    int i;
    #####: 1294:    if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1295:      for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1296:        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1297:        state->deckCount[nextPlayer]++;
    #####: 1298:        state->discard[nextPlayer][i] = -1;
    #####: 1299:        state->discardCount[nextPlayer]--;
        -: 1300:      }
        -: 1301:
    #####: 1302:      shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1303:    }
    #####: 1304:    j = 1;
    #####: 1305:    for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1306:      tributeRevealedCards[j] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1307:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1308:      state->deckCount[nextPlayer]--;
        -: 1309:    }
        -: 1310:
    #####: 1311:  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1312:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1313:    state->playedCardCount++;
    #####: 1314:    tributeRevealedCards[1] = -1;
        -: 1315:  }
        -: 1316:
    #####: 1317:  for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1318:    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1319:      state->coins += 2;
        -: 1320:    }
        -: 1321:
    #####: 1322:    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1323:      j = 0;
        -: 1324:      //draw 2 cards
    #####: 1325:      for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1326:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1327:      }
        -: 1328:    }
        -: 1329:    else{//Action Card
    #####: 1330:      state->numActions = 2;
        -: 1331:    }
        -: 1332:  }
    #####: 1333:  return;
        -: 1334:}
        -: 1335:}
        -: 1336:
function mineRe called 0 returned 0% blocks executed 0%
    #####: 1337:int mineRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1338:  int cardToTrash = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1339:
    #####: 1340:  if (state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] < gold || choice2 < treasure_map || choice2 > curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1341:  {
    #####: 1342:    return -1;
        -: 1343:  }
        -: 1344:
    #####: 1345:  if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1346:  {
    #####: 1347:    return -1;
        -: 1348:  }
        -: 1349:
    #####: 1350:  gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1351:
        -: 1352:  //discard card from hand
    #####: 1353:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1354:  int i;
        -: 1355:  //discard trashed card
    #####: 1356:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1357:  {
    #####: 1358:    if (state->hand[currentPlayer][i] != cardToTrash)
branch  0 never executed
branch  1 never executed
        -: 1359:    {
    #####: 1360:      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1361:      break;
        -: 1362:    }
        -: 1363:  }
    #####: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367://end of dominion.c
**********************************************
**********************************************
cardtest4.c TEST BEGIN:
Test to check unused Players score
PASSED: Test to check unused Players score

Test to check if one player is the winners
PASSED: Test to check if one player is the winners

Test to check if all players have same victory cards
PASSED: Test to check if all players have same victory cards

# FAILED TESTS: 0
File 'dominion.c'
Lines executed:22.40% of 567
Branches executed:24.94% of 425
Taken at least once:20.24% of 425
Calls executed:9.47% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 60 returned 100% blocks executed 83%
       60:    8:int compare(const void* a, const void* b) {
       60:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       60:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       16:   12:    return -1;
       44:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2 returned 100% blocks executed 88%
        2:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        2:   44:  SelectStream(1);
call    0 returned 100%
        2:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        2:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        2:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       22:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      220:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        2:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        2:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        2:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:  state->supplyCount[silver] = 40;
        2:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       42:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      330:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      310:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       20:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
        8:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       16:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       20:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        6:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        4:  140:      state->deckCount[i] = 0;
       16:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       12:  143:	  state->deck[i][j] = estate;
       12:  144:	  state->deckCount[i]++;
        -:  145:	}
       32:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       28:  148:	  state->deck[i][j] = copper;
       28:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        6:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        4:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        6:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        4:  166:      state->handCount[i] = 0;
        4:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       56:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       54:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        2:  182:  state->outpostPlayed = 0;
        2:  183:  state->phase = 0;
        2:  184:  state->numActions = 1;
        2:  185:  state->numBuys = 1;
        2:  186:  state->playedCardCount = 0;
        2:  187:  state->whoseTurn = 0;
        2:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       12:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        2:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        2:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 4 returned 100% blocks executed 94%
        4:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        4:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        4:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        4:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       48:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       40:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       40:  216:    newDeck[newDeckPos] = state->deck[player][card];
       40:  217:    newDeckPos++;
      140:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      100:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       40:  221:    state->deckCount[player]--;
        -:  222:  }
       44:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       40:  224:    state->deck[player][i] = newDeck[i];
       40:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        4:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 2 returned 100% blocks executed 100%
        2:  346:int whoseTurn(struct gameState *state) {
        2:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 4 returned 100% blocks executed 32%
        4:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        4:  420:  int score = 0;
        -:  421:  //score from hand
        9:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 56%
branch  1 taken 44% (fallthrough)
        -:  423:    {
        5:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
        4:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
        4:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
        4:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 2 returned 100% blocks executed 100%
        2:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
       10:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
        8:  467:      if (i >= state->numPlayers)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  468:	{
        4:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
        4:  473:	  players[i] = scoreFor (i, state);
call    0 returned 100%
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
        2:  478:  j = 0;
       10:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  480:    {
        8:  481:      if (players[i] > players[j])
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        -:  482:	{
        1:  483:	  j = i;
        -:  484:	}
        -:  485:    }
        2:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
        2:  489:  currentPlayer = whoseTurn(state);
call    0 returned 100%
       10:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  491:    {
        8:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 38% (fallthrough)
branch  1 taken 63%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        -:  493:	{
        1:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
        2:  499:  j = 0;
       10:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  501:    {
        8:  502:      if ( players[i] > players[j] )
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        -:  503:	{
        1:  504:	  j = i;
        -:  505:	}
        -:  506:    }
        2:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
       10:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  511:    {
        8:  512:      if ( players[i] == highScore )
branch  0 taken 38% (fallthrough)
branch  1 taken 63%
        -:  513:	{
        3:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
        5:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
        2:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 10 returned 100% blocks executed 38%
       10:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       10:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       10:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       10:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  576:    state->deckCount[player]--;
       10:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       10:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  672:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  673:	}
    #####:  674:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
    #####:  684:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
    #####:  688:      return 0;
        -:  689:
        -:  690:    case council_room:
        -:  691:      //+4 Cards
    #####:  692:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  693:	{
    #####:  694:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  695:	}
        -:  696:
        -:  697:      //+1 Buy
    #####:  698:      state->numBuys++;
        -:  699:
        -:  700:      //Each other player draws a card
    #####:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  702:	{
    #####:  703:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  704:	    {
    #####:  705:	      drawCard(i, state);
call    0 never executed
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:      //put played card in played card pile
    #####:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  711:
    #####:  712:      return 0;
        -:  713:
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:
    #####:  765:      return 0;
        -:  766:
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:
        -:  770:    case mine:
        -:  771:      ;
        -:  772:      int checkit;
    #####:  773:      checkit = mineRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  774:      if(checkit == -1)
branch  0 never executed
branch  1 never executed
    #####:  775:        return -1;
        -:  776:      else
    #####:  777:        return 0;
        -:  778:
        -:  779:    case remodel:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  788:
        -:  789:      //discard card from hand
    #####:  790:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  791:
        -:  792:      //discard trashed card
    #####:  793:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  794:	{
    #####:  795:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  796:	    {
    #####:  797:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  798:	      break;
        -:  799:	    }
        -:  800:	}
        -:  801:
        -:  802:
    #####:  803:      return 0;
        -:  804:
        -:  805:    case smithy:
        -:  806:      //+3 Cards
    #####:  807:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  808:	{
    #####:  809:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  810:	}
        -:  811:
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  814:      return 0;
        -:  815:
        -:  816:    case village:
        -:  817:      //+1 Card
    #####:  818:      drawCard(currentPlayer, state);
call    0 never executed
        -:  819:
        -:  820:      //+2 Actions
    #####:  821:      state->numActions = state->numActions + 2;
        -:  822:
        -:  823:      //discard played card from hand
    #####:  824:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  825:      return 0;
        -:  826:
        -:  827:    case baron:
    #####:  828:      baronRe(state, currentPlayer, choice1);
call    0 never executed
    #####:  829:      return 0;
        -:  830:
        -:  831:    case great_hall:
        -:  832:      //+1 Card
    #####:  833:      drawCard(currentPlayer, state);
call    0 never executed
        -:  834:
        -:  835:      //+1 Actions
    #####:  836:      state->numActions++;
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  840:      return 0;
        -:  841:
        -:  842:    case minion:
        -:  843:
    #####:  844:    minionRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  845:    return 0;
        -:  846:
        -:  847:    case steward:
    #####:  848:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  849:	{
        -:  850:	  //+2 cards
    #####:  851:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  852:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  853:	}
    #####:  854:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  855:	{
        -:  856:	  //+2 coins
    #####:  857:	  state->coins = state->coins + 2;
        -:  858:	}
        -:  859:      else
        -:  860:	{
        -:  861:	  //trash 2 cards in hand
    #####:  862:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  863:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  864:	}
        -:  865:
        -:  866:      //discard card from hand
    #####:  867:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  868:      return 0;
        -:  869:
        -:  870:    case tribute:
        -:  871:
    #####:  872:      tributeRe(state, currentPlayer, tributeRevealedCards);
call    0 never executed
    #####:  873:      return 0;
        -:  874:
        -:  875:    case ambassador:
        -:  876:      ;
    #####:  877:      int check = ambassadorRe(state,currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  878:      if(check == -1)
branch  0 never executed
branch  1 never executed
    #####:  879:        return -1;
        -:  880:      else
    #####:  881:        return 0;
        -:  882:
        -:  883:    case cutpurse:
        -:  884:
    #####:  885:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  886:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  887:	{
    #####:  888:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  893:		    {
    #####:  894:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  895:		      break;
        -:  896:		    }
    #####:  897:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  898:		    {
    #####:  899:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  900:			{
        -:  901:			  if (DEBUG)
        -:  902:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  903:			}
    #####:  904:		      break;
        -:  905:		    }
        -:  906:		}
        -:  907:
        -:  908:	    }
        -:  909:
        -:  910:	}
        -:  911:
        -:  912:      //discard played card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  914:
    #####:  915:      return 0;
        -:  916:
        -:  917:
        -:  918:    case embargo:
        -:  919:      //+2 Coins
    #####:  920:      state->coins = state->coins + 2;
        -:  921:
        -:  922:      //see if selected pile is in play
    #####:  923:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  924:	{
    #####:  925:	  return -1;
        -:  926:	}
        -:  927:
        -:  928:      //add embargo token to selected supply pile
    #####:  929:      state->embargoTokens[choice1]++;
        -:  930:
        -:  931:      //trash card
    #####:  932:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  933:      return 0;
        -:  934:
        -:  935:    case outpost:
        -:  936:      //set outpost flag
    #####:  937:      state->outpostPlayed++;
        -:  938:
        -:  939:      //discard card
    #####:  940:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  941:      return 0;
        -:  942:
        -:  943:    case salvager:
        -:  944:      //+1 buy
    #####:  945:      state->numBuys++;
        -:  946:
    #####:  947:      if (choice1)
branch  0 never executed
branch  1 never executed
        -:  948:	{
        -:  949:	  //gain coins equal to trashed card
    #####:  950:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  951:	  //trash card
    #####:  952:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  953:	}
        -:  954:
        -:  955:      //discard card
    #####:  956:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  957:      return 0;
        -:  958:
        -:  959:    case sea_hag:
    #####:  960:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  962:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  963:	  state->discardCount[i]++;
    #####:  964:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  965:	}
        -:  966:      }
    #####:  967:      return 0;
        -:  968:
        -:  969:    case treasure_map:
        -:  970:      //search hand for another treasure_map
    #####:  971:      index = -1;
    #####:  972:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	{
    #####:  974:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  975:	    {
    #####:  976:	      index = i;
    #####:  977:	      break;
        -:  978:	    }
        -:  979:	}
    #####:  980:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //trash both treasure cards
    #####:  983:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  984:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  985:
        -:  986:	  //gain 4 Gold cards
    #####:  987:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  988:	    {
    #####:  989:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  990:	    }
        -:  991:
        -:  992:	  //return success
    #####:  993:	  return 1;
        -:  994:	}
        -:  995:
        -:  996:      //no second treasure_map found in hand
    #####:  997:      return -1;
        -:  998:    }
        -:  999:
    #####: 1000:  return -1;
        -: 1001:}
        -: 1002:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1003:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1004:{
        -: 1005:
        -: 1006:  //if card is not trashed, added to Played pile
    #####: 1007:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1008:    {
        -: 1009:      //add card to played pile
    #####: 1010:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1011:      state->playedCardCount++;
        -: 1012:    }
        -: 1013:
        -: 1014:  //set played card to -1
    #####: 1015:  state->hand[currentPlayer][handPos] = -1;
        -: 1016:
        -: 1017:  //remove card from player's hand
    #####: 1018:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1019:    {
        -: 1020:      //reduce number of cards in hand
    #####: 1021:      state->handCount[currentPlayer]--;
        -: 1022:    }
    #####: 1023:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1024:    {
        -: 1025:      //reduce number of cards in hand
    #####: 1026:      state->handCount[currentPlayer]--;
        -: 1027:    }
        -: 1028:  else
        -: 1029:    {
        -: 1030:      //replace discarded card with last card in hand
    #####: 1031:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1032:      //set last card to -1
    #####: 1033:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1034:      //reduce number of cards in hand
    #####: 1035:      state->handCount[currentPlayer]--;
        -: 1036:    }
        -: 1037:
    #####: 1038:  return 0;
        -: 1039:}
        -: 1040:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1041:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1042:{
        -: 1043:  //Note: supplyPos is enum of choosen card
        -: 1044:
        -: 1045:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1046:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1047:    {
    #####: 1048:      return -1;
        -: 1049:    }
        -: 1050:
        -: 1051:  //added card for [whoseTurn] current player:
        -: 1052:  // toFlag = 0 : add to discard
        -: 1053:  // toFlag = 1 : add to deck
        -: 1054:  // toFlag = 2 : add to hand
        -: 1055:
    #####: 1056:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1057:    {
    #####: 1058:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1059:      state->deckCount[player]++;
        -: 1060:    }
    #####: 1061:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1062:    {
    #####: 1063:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1064:      state->handCount[player]++;
        -: 1065:    }
        -: 1066:  else
        -: 1067:    {
    #####: 1068:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1069:      state->discardCount[player]++;
        -: 1070:    }
        -: 1071:
        -: 1072:  //decrease number in supply pile
    #####: 1073:  state->supplyCount[supplyPos]--;
        -: 1074:
    #####: 1075:  return 0;
        -: 1076:}
        -: 1077:
function updateCoins called 2 returned 100% blocks executed 82%
        2: 1078:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1079:{
        -: 1080:  int i;
        -: 1081:
        -: 1082:  //reset coin count
        2: 1083:  state->coins = 0;
        -: 1084:
        -: 1085:  //add coins for each Treasure card in player's hand
       12: 1086:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1087:    {
       10: 1088:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1089:	{
        8: 1090:	  state->coins += 1;
        -: 1091:	}
        2: 1092:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1093:	{
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        2: 1096:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1097:	{
    #####: 1098:	  state->coins += 3;
        -: 1099:	}
        -: 1100:    }
        -: 1101:
        -: 1102:  //add bonus
        2: 1103:  state->coins += bonus;
        -: 1104:
        2: 1105:  return 0;
        -: 1106:}
        -: 1107:
        -: 1108://Function to be ran inside cardEffect() for the baron specific card
function baronRe called 0 returned 0% blocks executed 0%
    #####: 1109:void baronRe(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1110:  state->numBuys+1;//Increase buys by 1!
    #####: 1111:  if(choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1112:    int p = 0;//Iterator for hand!
    #####: 1113:    int card_not_discarded = 1;//Flag for discard set!
    #####: 1114:    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1115:      if(state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1116:        state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1117:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1118:        state->discardCount[currentPlayer]++;
    #####: 1119:        p = handCountSlide(state, currentPlayer, p);
call    0 never executed
    #####: 1120:        card_not_discarded = 0;//Exit the loop
        -: 1121:      }
    #####: 1122:      else if(p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1123:        if(DEBUG) {
        -: 1124:          printf("No estate cards in your hand, invalid choice\n");
        -: 1125:          printf("Must gain an estate if there are any\n");
        -: 1126:        }
    #####: 1127:        if(supplyCount(estate, state) > 1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1128:          gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1129:          state->supplyCount[estate]--;//Decrement estates
    #####: 1130:          if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1131:            isGameOver(state);
call    0 never executed
        -: 1132:          }
        -: 1133:        }
    #####: 1134:        card_not_discarded = 0;//Exit the loop
        -: 1135:      }
        -: 1136:
        -: 1137:      else{
    #####: 1138:        p++;//Next card
        -: 1139:      }
        -: 1140:    }
        -: 1141:  }
        -: 1142:
        -: 1143:  else{
    #####: 1144:    if(supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1145:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1146:      state->supplyCount[estate]--;//Decrement Estates
    #####: 1147:      if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1148:        isGameOver(state);
call    0 never executed
        -: 1149:      }
        -: 1150:    }
        -: 1151:  }
        -: 1152:
    #####: 1153:  return;
        -: 1154:}
        -: 1155://Function that slides the players hand down to remove a card from the players hand
function handCountSlide called 0 returned 0% blocks executed 0%
    #####: 1156:int handCountSlide(struct gameState *state, int currentPlayer, int iterator) {
    #####: 1157:  for (;iterator < state->handCount[currentPlayer]; iterator++){
branch  0 never executed
branch  1 never executed
        -: 1158:    //Slide players hand down one card from current index (iterator)
    #####: 1159:    state->hand[currentPlayer][iterator] = state->hand[currentPlayer][iterator+1];
        -: 1160:  }
        -: 1161:  //Remove hand count by one to completely remove card
    #####: 1162:  state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1163:  state->handCount[currentPlayer]--;
    #####: 1164:  return iterator;
        -: 1165:}
        -: 1166:
        -: 1167://Function to be ran inside cardEffect() for the minion specific card
function minionRe called 0 returned 0% blocks executed 0%
    #####: 1168:void minionRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1169:  //+1 action
    #####: 1170:  state->numActions+1;
        -: 1171:  //discard card from hand
    #####: 1172:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1173:
    #####: 1174:  if(choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1175:  {
    #####: 1176:    state->coins = state->coins + 2;
        -: 1177:  }
        -: 1178:
    #####: 1179:  else if(choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1180:  {
        -: 1181:    //discard hand
    #####: 1182:    while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1183:    {
    #####: 1184:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1185:    }
        -: 1186:    int i;
        -: 1187:    int j;
        -: 1188:    //draw 4
    #####: 1189:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1190:    {
    #####: 1191:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1192:    }
        -: 1193:
        -: 1194:    //other players discard hand and redraw if hand size > 4
    #####: 1195:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:    {
    #####: 1197:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1198:      {
    #####: 1199:        if ( state->handCount[i] > 5 )
branch  0 never executed
branch  1 never executed
        -: 1200:        {
        -: 1201:          //discard hand
    #####: 1202:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1203:          {
    #####: 1204:            discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1205:          }
        -: 1206:          //draw 4
    #####: 1207:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1208:          {
    #####: 1209:            drawCard(i, state);
call    0 never executed
        -: 1210:          }
        -: 1211:        }
        -: 1212:      }
        -: 1213:    }
        -: 1214:  }
    #####: 1215:  return;
        -: 1216:}
        -: 1217:
function ambassadorRe called 0 returned 0% blocks executed 0%
    #####: 1218:int ambassadorRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1219:  int i;
    #####: 1220:  int j = 0;		//used to check if player has enough cards to discard
        -: 1221:  //Checks bound cases, if the amount of cards is less that 0 or greater than 2, or if the choice1 card is the ambassador card
    #####: 1222:  if (choice2 > 2 || choice2 < 0 || choice1 == handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1223:  {
    #####: 1224:    return -1;
        -: 1225:  }
        -: 1226:  //Loop to check how many copies of the card the player wishes to return to the supply
    #####: 1227:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1228:  {
    #####: 1229:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) //Checks for bound cases
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1230:    {
    #####: 1231:      j++;
        -: 1232:    }
        -: 1233:  }
    #####: 1234:  if (j < choice2)  //bound case if player does not have the amount of desired cards to return
branch  0 never executed
branch  1 never executed
        -: 1235:  {
    #####: 1236:    return -1;
        -: 1237:  }
        -: 1238:
        -: 1239:  if (DEBUG)
        -: 1240:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1241:
        -: 1242:  //increase supply count for choosen card by amount being discarded
    #####: 1243:  state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1244:
        -: 1245:  //each other player gains a copy of revealed card
    #####: 1246:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1247:  {
    #####: 1248:    if (j != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1249:    {
    #####: 1250:      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1251:    }
        -: 1252:  }
        -: 1253:
        -: 1254:  //discard played card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1256:
        -: 1257:  //trash copies of cards returned to supply
    #####: 1258:  for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1259:  {
    #####: 1260:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:    {
    #####: 1262:      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1263:      {
    #####: 1264:        discardCard(j, currentPlayer, state, 1);
call    0 never executed
    #####: 1265:        break;
        -: 1266:      }
        -: 1267:    }
        -: 1268:  }
    #####: 1269:  return 0;
        -: 1270:}
        -: 1271:
function tributeRe called 0 returned 0% blocks executed 0%
    #####: 1272:void tributeRe(struct gameState *state, int currentPlayer, int tributeRevealedCards[]) {
        -: 1273:  int j;  //used in refactored for loops
    #####: 1274:  int nextPlayer = currentPlayer + 1;
    #####: 1275:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1276:    if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1277:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1278:      state->deckCount[nextPlayer]--;
        -: 1279:    }
    #####: 1280:    else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1281:      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1282:      state->discardCount[nextPlayer]--;
        -: 1283:    }
        -: 1284:    else{
        -: 1285:      //No Card to Reveal
        -: 1286:      if (DEBUG){
        -: 1287:        printf("No cards to reveal\n");
        -: 1288:      }
        -: 1289:    }
        -: 1290:  }
        -: 1291:
        -: 1292:  else{
        -: 1293:    int i;
    #####: 1294:    if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1295:      for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1296:        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1297:        state->deckCount[nextPlayer]++;
    #####: 1298:        state->discard[nextPlayer][i] = -1;
    #####: 1299:        state->discardCount[nextPlayer]--;
        -: 1300:      }
        -: 1301:
    #####: 1302:      shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1303:    }
    #####: 1304:    j = 1;
    #####: 1305:    for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1306:      tributeRevealedCards[j] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1307:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1308:      state->deckCount[nextPlayer]--;
        -: 1309:    }
        -: 1310:
    #####: 1311:  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1312:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1313:    state->playedCardCount++;
    #####: 1314:    tributeRevealedCards[1] = -1;
        -: 1315:  }
        -: 1316:
    #####: 1317:  for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1318:    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1319:      state->coins += 2;
        -: 1320:    }
        -: 1321:
    #####: 1322:    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1323:      j = 0;
        -: 1324:      //draw 2 cards
    #####: 1325:      for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1326:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1327:      }
        -: 1328:    }
        -: 1329:    else{//Action Card
    #####: 1330:      state->numActions = 2;
        -: 1331:    }
        -: 1332:  }
    #####: 1333:  return;
        -: 1334:}
        -: 1335:}
        -: 1336:
function mineRe called 0 returned 0% blocks executed 0%
    #####: 1337:int mineRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1338:  int cardToTrash = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1339:
    #####: 1340:  if (state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] < gold || choice2 < treasure_map || choice2 > curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1341:  {
    #####: 1342:    return -1;
        -: 1343:  }
        -: 1344:
    #####: 1345:  if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1346:  {
    #####: 1347:    return -1;
        -: 1348:  }
        -: 1349:
    #####: 1350:  gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1351:
        -: 1352:  //discard card from hand
    #####: 1353:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1354:  int i;
        -: 1355:  //discard trashed card
    #####: 1356:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1357:  {
    #####: 1358:    if (state->hand[currentPlayer][i] != cardToTrash)
branch  0 never executed
branch  1 never executed
        -: 1359:    {
    #####: 1360:      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1361:      break;
        -: 1362:    }
        -: 1363:  }
    #####: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367://end of dominion.c
**********************************************
**********************************************
cardtest5.c TEST BEGIN:
Test to check when deck is not empty
PASSED: Test for function returned correctly

PASSED: Test for card in hand

PASSED: Test for card removed from deck

Test to check when deck is empty & discard pile is not empty
PASSED: Test for function returned correctly

PASSED: Test for card in hand

PASSED: Test for card removed from deck

PASSED: Test for discard pile changed to deck

Test to check when deck is empty & discard pile is empty
PASSED: Test for function returned correctly

# FAILED TESTS: 0
File 'dominion.c'
Lines executed:18.34% of 567
Branches executed:16.47% of 425
Taken at least once:14.12% of 425
Calls executed:8.42% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 35 returned 100% blocks executed 83%
       35:    8:int compare(const void* a, const void* b) {
       35:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       35:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
        8:   12:    return -1;
       27:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 100%
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
        4:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        8:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 4 returned 100% blocks executed 100%
        4:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        4:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        4:  209:  if (state->deckCount[player] < 1)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:  210:    return -1;
        3:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       31:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       25:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       25:  216:    newDeck[newDeckPos] = state->deck[player][card];
       25:  217:    newDeckPos++;
       83:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
       58:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       25:  221:    state->deckCount[player]--;
        -:  222:  }
       28:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       25:  224:    state->deck[player][i] = newDeck[i];
       25:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        3:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 8 returned 100% blocks executed 100%
        8:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        8:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        7:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        5:  534:      state->deck[player][i] = state->discard[player][i];
        5:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  560:      return -1;
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        6:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        6:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        6:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        6:  576:    state->deckCount[player]--;
        6:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        7:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  672:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  673:	}
    #####:  674:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
    #####:  684:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
    #####:  688:      return 0;
        -:  689:
        -:  690:    case council_room:
        -:  691:      //+4 Cards
    #####:  692:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  693:	{
    #####:  694:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  695:	}
        -:  696:
        -:  697:      //+1 Buy
    #####:  698:      state->numBuys++;
        -:  699:
        -:  700:      //Each other player draws a card
    #####:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  702:	{
    #####:  703:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  704:	    {
    #####:  705:	      drawCard(i, state);
call    0 never executed
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:      //put played card in played card pile
    #####:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  711:
    #####:  712:      return 0;
        -:  713:
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:
    #####:  765:      return 0;
        -:  766:
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:
        -:  770:    case mine:
        -:  771:      ;
        -:  772:      int checkit;
    #####:  773:      checkit = mineRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  774:      if(checkit == -1)
branch  0 never executed
branch  1 never executed
    #####:  775:        return -1;
        -:  776:      else
    #####:  777:        return 0;
        -:  778:
        -:  779:    case remodel:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  788:
        -:  789:      //discard card from hand
    #####:  790:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  791:
        -:  792:      //discard trashed card
    #####:  793:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  794:	{
    #####:  795:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  796:	    {
    #####:  797:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  798:	      break;
        -:  799:	    }
        -:  800:	}
        -:  801:
        -:  802:
    #####:  803:      return 0;
        -:  804:
        -:  805:    case smithy:
        -:  806:      //+3 Cards
    #####:  807:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  808:	{
    #####:  809:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  810:	}
        -:  811:
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  814:      return 0;
        -:  815:
        -:  816:    case village:
        -:  817:      //+1 Card
    #####:  818:      drawCard(currentPlayer, state);
call    0 never executed
        -:  819:
        -:  820:      //+2 Actions
    #####:  821:      state->numActions = state->numActions + 2;
        -:  822:
        -:  823:      //discard played card from hand
    #####:  824:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  825:      return 0;
        -:  826:
        -:  827:    case baron:
    #####:  828:      baronRe(state, currentPlayer, choice1);
call    0 never executed
    #####:  829:      return 0;
        -:  830:
        -:  831:    case great_hall:
        -:  832:      //+1 Card
    #####:  833:      drawCard(currentPlayer, state);
call    0 never executed
        -:  834:
        -:  835:      //+1 Actions
    #####:  836:      state->numActions++;
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  840:      return 0;
        -:  841:
        -:  842:    case minion:
        -:  843:
    #####:  844:    minionRe(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  845:    return 0;
        -:  846:
        -:  847:    case steward:
    #####:  848:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  849:	{
        -:  850:	  //+2 cards
    #####:  851:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  852:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  853:	}
    #####:  854:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  855:	{
        -:  856:	  //+2 coins
    #####:  857:	  state->coins = state->coins + 2;
        -:  858:	}
        -:  859:      else
        -:  860:	{
        -:  861:	  //trash 2 cards in hand
    #####:  862:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  863:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  864:	}
        -:  865:
        -:  866:      //discard card from hand
    #####:  867:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  868:      return 0;
        -:  869:
        -:  870:    case tribute:
        -:  871:
    #####:  872:      tributeRe(state, currentPlayer, tributeRevealedCards);
call    0 never executed
    #####:  873:      return 0;
        -:  874:
        -:  875:    case ambassador:
        -:  876:      ;
    #####:  877:      int check = ambassadorRe(state,currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  878:      if(check == -1)
branch  0 never executed
branch  1 never executed
    #####:  879:        return -1;
        -:  880:      else
    #####:  881:        return 0;
        -:  882:
        -:  883:    case cutpurse:
        -:  884:
    #####:  885:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  886:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  887:	{
    #####:  888:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  893:		    {
    #####:  894:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  895:		      break;
        -:  896:		    }
    #####:  897:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  898:		    {
    #####:  899:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  900:			{
        -:  901:			  if (DEBUG)
        -:  902:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  903:			}
    #####:  904:		      break;
        -:  905:		    }
        -:  906:		}
        -:  907:
        -:  908:	    }
        -:  909:
        -:  910:	}
        -:  911:
        -:  912:      //discard played card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  914:
    #####:  915:      return 0;
        -:  916:
        -:  917:
        -:  918:    case embargo:
        -:  919:      //+2 Coins
    #####:  920:      state->coins = state->coins + 2;
        -:  921:
        -:  922:      //see if selected pile is in play
    #####:  923:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  924:	{
    #####:  925:	  return -1;
        -:  926:	}
        -:  927:
        -:  928:      //add embargo token to selected supply pile
    #####:  929:      state->embargoTokens[choice1]++;
        -:  930:
        -:  931:      //trash card
    #####:  932:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  933:      return 0;
        -:  934:
        -:  935:    case outpost:
        -:  936:      //set outpost flag
    #####:  937:      state->outpostPlayed++;
        -:  938:
        -:  939:      //discard card
    #####:  940:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  941:      return 0;
        -:  942:
        -:  943:    case salvager:
        -:  944:      //+1 buy
    #####:  945:      state->numBuys++;
        -:  946:
    #####:  947:      if (choice1)
branch  0 never executed
branch  1 never executed
        -:  948:	{
        -:  949:	  //gain coins equal to trashed card
    #####:  950:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  951:	  //trash card
    #####:  952:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  953:	}
        -:  954:
        -:  955:      //discard card
    #####:  956:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  957:      return 0;
        -:  958:
        -:  959:    case sea_hag:
    #####:  960:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  962:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  963:	  state->discardCount[i]++;
    #####:  964:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  965:	}
        -:  966:      }
    #####:  967:      return 0;
        -:  968:
        -:  969:    case treasure_map:
        -:  970:      //search hand for another treasure_map
    #####:  971:      index = -1;
    #####:  972:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	{
    #####:  974:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  975:	    {
    #####:  976:	      index = i;
    #####:  977:	      break;
        -:  978:	    }
        -:  979:	}
    #####:  980:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //trash both treasure cards
    #####:  983:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  984:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  985:
        -:  986:	  //gain 4 Gold cards
    #####:  987:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  988:	    {
    #####:  989:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  990:	    }
        -:  991:
        -:  992:	  //return success
    #####:  993:	  return 1;
        -:  994:	}
        -:  995:
        -:  996:      //no second treasure_map found in hand
    #####:  997:      return -1;
        -:  998:    }
        -:  999:
    #####: 1000:  return -1;
        -: 1001:}
        -: 1002:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1003:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1004:{
        -: 1005:
        -: 1006:  //if card is not trashed, added to Played pile
    #####: 1007:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1008:    {
        -: 1009:      //add card to played pile
    #####: 1010:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1011:      state->playedCardCount++;
        -: 1012:    }
        -: 1013:
        -: 1014:  //set played card to -1
    #####: 1015:  state->hand[currentPlayer][handPos] = -1;
        -: 1016:
        -: 1017:  //remove card from player's hand
    #####: 1018:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1019:    {
        -: 1020:      //reduce number of cards in hand
    #####: 1021:      state->handCount[currentPlayer]--;
        -: 1022:    }
    #####: 1023:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1024:    {
        -: 1025:      //reduce number of cards in hand
    #####: 1026:      state->handCount[currentPlayer]--;
        -: 1027:    }
        -: 1028:  else
        -: 1029:    {
        -: 1030:      //replace discarded card with last card in hand
    #####: 1031:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1032:      //set last card to -1
    #####: 1033:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1034:      //reduce number of cards in hand
    #####: 1035:      state->handCount[currentPlayer]--;
        -: 1036:    }
        -: 1037:
    #####: 1038:  return 0;
        -: 1039:}
        -: 1040:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1041:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1042:{
        -: 1043:  //Note: supplyPos is enum of choosen card
        -: 1044:
        -: 1045:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1046:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1047:    {
    #####: 1048:      return -1;
        -: 1049:    }
        -: 1050:
        -: 1051:  //added card for [whoseTurn] current player:
        -: 1052:  // toFlag = 0 : add to discard
        -: 1053:  // toFlag = 1 : add to deck
        -: 1054:  // toFlag = 2 : add to hand
        -: 1055:
    #####: 1056:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1057:    {
    #####: 1058:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1059:      state->deckCount[player]++;
        -: 1060:    }
    #####: 1061:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1062:    {
    #####: 1063:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1064:      state->handCount[player]++;
        -: 1065:    }
        -: 1066:  else
        -: 1067:    {
    #####: 1068:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1069:      state->discardCount[player]++;
        -: 1070:    }
        -: 1071:
        -: 1072:  //decrease number in supply pile
    #####: 1073:  state->supplyCount[supplyPos]--;
        -: 1074:
    #####: 1075:  return 0;
        -: 1076:}
        -: 1077:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1078:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1079:{
        -: 1080:  int i;
        -: 1081:
        -: 1082:  //reset coin count
        1: 1083:  state->coins = 0;
        -: 1084:
        -: 1085:  //add coins for each Treasure card in player's hand
        6: 1086:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1087:    {
        5: 1088:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1089:	{
        4: 1090:	  state->coins += 1;
        -: 1091:	}
        1: 1092:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1093:	{
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        1: 1096:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1097:	{
    #####: 1098:	  state->coins += 3;
        -: 1099:	}
        -: 1100:    }
        -: 1101:
        -: 1102:  //add bonus
        1: 1103:  state->coins += bonus;
        -: 1104:
        1: 1105:  return 0;
        -: 1106:}
        -: 1107:
        -: 1108://Function to be ran inside cardEffect() for the baron specific card
function baronRe called 0 returned 0% blocks executed 0%
    #####: 1109:void baronRe(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1110:  state->numBuys+1;//Increase buys by 1!
    #####: 1111:  if(choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1112:    int p = 0;//Iterator for hand!
    #####: 1113:    int card_not_discarded = 1;//Flag for discard set!
    #####: 1114:    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1115:      if(state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1116:        state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1117:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1118:        state->discardCount[currentPlayer]++;
    #####: 1119:        p = handCountSlide(state, currentPlayer, p);
call    0 never executed
    #####: 1120:        card_not_discarded = 0;//Exit the loop
        -: 1121:      }
    #####: 1122:      else if(p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1123:        if(DEBUG) {
        -: 1124:          printf("No estate cards in your hand, invalid choice\n");
        -: 1125:          printf("Must gain an estate if there are any\n");
        -: 1126:        }
    #####: 1127:        if(supplyCount(estate, state) > 1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1128:          gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1129:          state->supplyCount[estate]--;//Decrement estates
    #####: 1130:          if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1131:            isGameOver(state);
call    0 never executed
        -: 1132:          }
        -: 1133:        }
    #####: 1134:        card_not_discarded = 0;//Exit the loop
        -: 1135:      }
        -: 1136:
        -: 1137:      else{
    #####: 1138:        p++;//Next card
        -: 1139:      }
        -: 1140:    }
        -: 1141:  }
        -: 1142:
        -: 1143:  else{
    #####: 1144:    if(supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1145:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1146:      state->supplyCount[estate]--;//Decrement Estates
    #####: 1147:      if(supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1148:        isGameOver(state);
call    0 never executed
        -: 1149:      }
        -: 1150:    }
        -: 1151:  }
        -: 1152:
    #####: 1153:  return;
        -: 1154:}
        -: 1155://Function that slides the players hand down to remove a card from the players hand
function handCountSlide called 0 returned 0% blocks executed 0%
    #####: 1156:int handCountSlide(struct gameState *state, int currentPlayer, int iterator) {
    #####: 1157:  for (;iterator < state->handCount[currentPlayer]; iterator++){
branch  0 never executed
branch  1 never executed
        -: 1158:    //Slide players hand down one card from current index (iterator)
    #####: 1159:    state->hand[currentPlayer][iterator] = state->hand[currentPlayer][iterator+1];
        -: 1160:  }
        -: 1161:  //Remove hand count by one to completely remove card
    #####: 1162:  state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1163:  state->handCount[currentPlayer]--;
    #####: 1164:  return iterator;
        -: 1165:}
        -: 1166:
        -: 1167://Function to be ran inside cardEffect() for the minion specific card
function minionRe called 0 returned 0% blocks executed 0%
    #####: 1168:void minionRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1169:  //+1 action
    #####: 1170:  state->numActions+1;
        -: 1171:  //discard card from hand
    #####: 1172:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1173:
    #####: 1174:  if(choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1175:  {
    #####: 1176:    state->coins = state->coins + 2;
        -: 1177:  }
        -: 1178:
    #####: 1179:  else if(choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1180:  {
        -: 1181:    //discard hand
    #####: 1182:    while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1183:    {
    #####: 1184:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1185:    }
        -: 1186:    int i;
        -: 1187:    int j;
        -: 1188:    //draw 4
    #####: 1189:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1190:    {
    #####: 1191:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1192:    }
        -: 1193:
        -: 1194:    //other players discard hand and redraw if hand size > 4
    #####: 1195:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:    {
    #####: 1197:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1198:      {
    #####: 1199:        if ( state->handCount[i] > 5 )
branch  0 never executed
branch  1 never executed
        -: 1200:        {
        -: 1201:          //discard hand
    #####: 1202:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1203:          {
    #####: 1204:            discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1205:          }
        -: 1206:          //draw 4
    #####: 1207:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1208:          {
    #####: 1209:            drawCard(i, state);
call    0 never executed
        -: 1210:          }
        -: 1211:        }
        -: 1212:      }
        -: 1213:    }
        -: 1214:  }
    #####: 1215:  return;
        -: 1216:}
        -: 1217:
function ambassadorRe called 0 returned 0% blocks executed 0%
    #####: 1218:int ambassadorRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -: 1219:  int i;
    #####: 1220:  int j = 0;		//used to check if player has enough cards to discard
        -: 1221:  //Checks bound cases, if the amount of cards is less that 0 or greater than 2, or if the choice1 card is the ambassador card
    #####: 1222:  if (choice2 > 2 || choice2 < 0 || choice1 == handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1223:  {
    #####: 1224:    return -1;
        -: 1225:  }
        -: 1226:  //Loop to check how many copies of the card the player wishes to return to the supply
    #####: 1227:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1228:  {
    #####: 1229:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) //Checks for bound cases
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1230:    {
    #####: 1231:      j++;
        -: 1232:    }
        -: 1233:  }
    #####: 1234:  if (j < choice2)  //bound case if player does not have the amount of desired cards to return
branch  0 never executed
branch  1 never executed
        -: 1235:  {
    #####: 1236:    return -1;
        -: 1237:  }
        -: 1238:
        -: 1239:  if (DEBUG)
        -: 1240:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1241:
        -: 1242:  //increase supply count for choosen card by amount being discarded
    #####: 1243:  state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1244:
        -: 1245:  //each other player gains a copy of revealed card
    #####: 1246:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1247:  {
    #####: 1248:    if (j != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1249:    {
    #####: 1250:      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1251:    }
        -: 1252:  }
        -: 1253:
        -: 1254:  //discard played card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1256:
        -: 1257:  //trash copies of cards returned to supply
    #####: 1258:  for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1259:  {
    #####: 1260:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:    {
    #####: 1262:      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1263:      {
    #####: 1264:        discardCard(j, currentPlayer, state, 1);
call    0 never executed
    #####: 1265:        break;
        -: 1266:      }
        -: 1267:    }
        -: 1268:  }
    #####: 1269:  return 0;
        -: 1270:}
        -: 1271:
function tributeRe called 0 returned 0% blocks executed 0%
    #####: 1272:void tributeRe(struct gameState *state, int currentPlayer, int tributeRevealedCards[]) {
        -: 1273:  int j;  //used in refactored for loops
    #####: 1274:  int nextPlayer = currentPlayer + 1;
    #####: 1275:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1276:    if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1277:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1278:      state->deckCount[nextPlayer]--;
        -: 1279:    }
    #####: 1280:    else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1281:      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1282:      state->discardCount[nextPlayer]--;
        -: 1283:    }
        -: 1284:    else{
        -: 1285:      //No Card to Reveal
        -: 1286:      if (DEBUG){
        -: 1287:        printf("No cards to reveal\n");
        -: 1288:      }
        -: 1289:    }
        -: 1290:  }
        -: 1291:
        -: 1292:  else{
        -: 1293:    int i;
    #####: 1294:    if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1295:      for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1296:        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1297:        state->deckCount[nextPlayer]++;
    #####: 1298:        state->discard[nextPlayer][i] = -1;
    #####: 1299:        state->discardCount[nextPlayer]--;
        -: 1300:      }
        -: 1301:
    #####: 1302:      shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1303:    }
    #####: 1304:    j = 1;
    #####: 1305:    for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1306:      tributeRevealedCards[j] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1307:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1308:      state->deckCount[nextPlayer]--;
        -: 1309:    }
        -: 1310:
    #####: 1311:  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1312:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1313:    state->playedCardCount++;
    #####: 1314:    tributeRevealedCards[1] = -1;
        -: 1315:  }
        -: 1316:
    #####: 1317:  for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1318:    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1319:      state->coins += 2;
        -: 1320:    }
        -: 1321:
    #####: 1322:    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1323:      j = 0;
        -: 1324:      //draw 2 cards
    #####: 1325:      for(j = 0; j < 2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1326:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1327:      }
        -: 1328:    }
        -: 1329:    else{//Action Card
    #####: 1330:      state->numActions = 2;
        -: 1331:    }
        -: 1332:  }
    #####: 1333:  return;
        -: 1334:}
        -: 1335:}
        -: 1336:
function mineRe called 0 returned 0% blocks executed 0%
    #####: 1337:int mineRe(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1338:  int cardToTrash = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1339:
    #####: 1340:  if (state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] < gold || choice2 < treasure_map || choice2 > curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1341:  {
    #####: 1342:    return -1;
        -: 1343:  }
        -: 1344:
    #####: 1345:  if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1346:  {
    #####: 1347:    return -1;
        -: 1348:  }
        -: 1349:
    #####: 1350:  gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1351:
        -: 1352:  //discard card from hand
    #####: 1353:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1354:  int i;
        -: 1355:  //discard trashed card
    #####: 1356:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1357:  {
    #####: 1358:    if (state->hand[currentPlayer][i] != cardToTrash)
branch  0 never executed
branch  1 never executed
        -: 1359:    {
    #####: 1360:      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1361:      break;
        -: 1362:    }
        -: 1363:  }
    #####: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367://end of dominion.c
**********************************************
